# NI Linux RT grub boot configuration script

# default env
set default=0
set BOOT_MODE=recovery
set root='(hd0,gpt2)' // Emergency fallback if searching fails
set CPLD_PROC_MODE_OFFSET=530 //Offset 0x0212
set CPLD_MODE_SAFE=0
set CPLD_MODE_RECOVERY=3
set CPLD_CONSOLE_OUT=2
set CPLD_TEST_OFFSET=512 //Offset 0x0200
set CPLD_STATUS_HIGH=545 //Offset 0x0221
set CPLD_STATUS_LOW=546 //Offset 0x0222
set RECOVERY_STATUS=0xAA
set SMBIOS_NILRT_TTYPE=160 // per NI SMBIOS spec 0.4x
set SMBIOS_NILRT_BMREG=6 // per NI SMBIOS spec 0.4x
set SMBIOS_NILRT_BMREG_SAFEMODE=0x02 // per NI SMBIOS spec 0.4x
set SMBIOS_SYSTEM_TTYPE=1
set SMBIOS_SYSTEM_VENDOR=4
set GRUB_SERIAL_CONSOLE=serial
set GRUB_SERIAL_SPEED=115200
set GRUB_SERIAL_BASE_CLOCK=1843200
set force_safemode=0;
set force_recovery=0;
set safemode_files="bzImage ramdisk.gz bootimage.ini bootimage.cfg"
set runmode_files="bzImage bootimage.ini bootimage.cfg"
set valid_runmode=1
set valid_safemode=1
set fail_state=0
set runmode_menu='Runmode'
set safemode_menu='Safemode'
set runmode_action=boot_runmode
set safemode_action=boot_safemode
set consoleoutenable=False
set safemodeenabled=False
set cpld_consoleoutenable=0
set serial_port=0
set kernellogparam=quiet
set video_term=console
set sys_reset=false
set system_manufacturer=""
set smbios_bootmode=0
set smbios_tablelen=0

# Set the root variable to NI's bootfs partition
search --set root --label nibootfs

function load_vars {
	if [ -f $grubenv_file ];then
		load_env -f $grubenv_file

		if [ $? -ne 0 ]; then
			load_env -f $grubenv_file_bak
		fi

		# Setting bootdelay in grubenv draws grub menu and enables
		# kernel debug messages. Overrides quietbootdelay.
		if [ ! -z $bootdelay ]; then
			set quietbootdelay=$bootdelay
			set kernellogparam=debug ignore_runlevel
		fi

		# Setting quietbootdelay in grubenv only draws grub menu,
		# does not change kernel cmdline.
		if [ ! -z $quietbootdelay ]; then
			set timeout=$quietbootdelay
		fi
	else
		load_env -f $grubenv_file_bak
		set sys_reset=true
	fi
}

function read_processor_mode {
	inb $CPLD_TEST_OFFSET -v cpld_test
	if [ $cpld_test = e5 ]; then
		inbit $CPLD_PROC_MODE_OFFSET $CPLD_MODE_RECOVERY -v force_recovery
		inbit $CPLD_PROC_MODE_OFFSET $CPLD_MODE_SAFE -v force_safemode
		inbit $CPLD_PROC_MODE_OFFSET $CPLD_CONSOLE_OUT -v cpld_consoleoutenable
	else
# Also check for newer, no-CPLD NI targets
# Insert the smbios module here to prevent issues with older grub builds
		insmod smbios
		smbios -t $SMBIOS_SYSTEM_TTYPE -s $SMBIOS_SYSTEM_VENDOR --set system_manufacturer
		if [ "$system_manufacturer" == "National Instruments" ]; then
			smbios -t $SMBIOS_NILRT_TTYPE -b 1 --set smbios_tablelen
			if [ $smbios_tablelen -gt $SMBIOS_NILRT_BMREG ]; then
				smbios -t $SMBIOS_NILRT_TTYPE -b $SMBIOS_NILRT_BMREG --set smbios_bootmode
				if [ $smbios_bootmode -bwa $SMBIOS_NILRT_BMREG_SAFEMODE ]; then
					force_safemode=1
				fi
			fi
		fi
	fi
	if [ $force_recovery = 1 ]; then
		set sys_reset=true
	fi
}

function setconsoleparam {
	if [ $consoleoutenable = False ] -a [ $cpld_consoleoutenable = 0 ]; then
		set consoleparam="console= "
	fi
}

function setusbgadgetparam {
	if [ -z $usbgadgetethaddr ]; then
		unset usb_gadget_args
	fi
}

function setterminal {
	if [ ! $consoleoutenable = False ] -o [ $cpld_consoleoutenable = 1 ]; then
		if [ $serial_port -ne 0 ]; then
			serial --port=$serial_port --speed=$GRUB_SERIAL_SPEED --base-clock=$GRUB_SERIAL_BASE_CLOCK
			set serial_term=$GRUB_SERIAL_CONSOLE
		fi
	fi

	terminal_output $video_term $serial_term

	if [ ! -z $serial_term ]; then
		terminal_input console $serial_term
	fi
}

function check_valid_os {
	#safemode
	for file in $safemode_files
	do
		if [ ! -f /.safe/$file ]; then
			set valid_safemode=0
			break
		fi
	done

	#runmode
	for file in $runmode_files
	do
		if [ ! -f /runmode/$file ]; then
			set valid_runmode=0
			break
		fi
	done

	if [ $valid_safemode = 0 -a $valid_runmode = 0 ]; then
		set fail_state=1
	fi

	# rootuuid is only generated at system provision - treat missing value as requiring recovery
	if [ "$rootuuid" = "" ]; then
		set fail_state=1
	fi
}

function boot_runmode {
	source /runmode/bootimage.cfg

	for cfg_d_file in /runmode/bootimage.cfg.d/*.cfg; do
		if [ -f "$cfg_d_file" ]; then
			source "$cfg_d_file"
		fi
	done

	setconsoleparam
	setusbgadgetparam

	linux $kernel_path root=PARTUUID=$rootuuid $otherbootargs $usb_gadget_args $kernellogparam $consoleparam $othbootargs sys_reset=$sys_reset
}

function boot_safemode {
	source /.safe/bootimage.cfg

	for cfg_d_file in /.safe/bootimage.cfg.d/*.cfg; do
		if [ -f "$cfg_d_file" ]; then
			source "$cfg_d_file"
		fi
	done

	setconsoleparam
	setusbgadgetparam

	linux $kernel_path $rootfs_path $otherbootargs $usb_gadget_args $kernellogparam $consoleparam $othbootargs sys_reset=$sys_reset
	initrd $ramdisk_path
}

function attempt_USB_recovery {
	search --set=root --label NIRECOVERY --hint hd0,msdos1

	if [ -f /efi/boot/bootx64.efi ]; then
		chainloader /efi/boot/bootx64.efi
		boot
	fi
}

function set_menu_and_default {
	if [ $BOOT_MODE = safemode -o $safemodeenabled = True -o $force_safemode = 1 ] ; then
		set default=1
	fi

	if [ $valid_runmode = 0 ]; then
		set default=1
		set runmode_menu="Runmode not installed"
		set runmode_action=boot_safemode
	elif [ $valid_safemode = 0 ]; then
		set default=0
		set safemode_menu="Safemode missing"
		set timeout=10
		set safemode_action=boot_runmode
	fi
}

function normal_boot {
	set_menu_and_default
	if [ -z $timeout ]; then
		if [ $default = 1 ]; then
			$safemode_action
		else
			$runmode_action
		fi
		boot
	else
		menuentry "$runmode_menu" {
			$runmode_action
		}

		menuentry "$safemode_menu" {
			$safemode_action
		}
	fi
}

insmod regexp
insmod iorw
insmod loadenv

search --set=envpath --label nibootfs
set grubenv_file=($envpath)/grub/grubenv
set grubenv_file_bak=($envpath)/grub/grubenv.bak

search --set=grubpath --label nigrub
if [ -f ($grubpath)/grubvar_readonly ]; then
	source ($grubpath)/grubvar_readonly
fi

if [ $grub_platform = efi ] ; then
	insmod efi_gop
	insmod efi_uga
	insmod font
	set gfxpayload=keep
else
	insmod vbe
	insmod vga
	set gfxpayload=text
fi

if loadfont unicode ; then
	set gfxmode=800x600
	insmod gfxterm
	set video_term=gfxterm
fi

# Load grubenv file
load_vars

if [ -f /bootmode ] ; then
	source /bootmode
fi

read_processor_mode
setterminal
check_valid_os
if [ $fail_state = 0 ]; then
	if [ $force_recovery = 1 ]; then
		attempt_USB_recovery
	fi
	normal_boot
else
	#set led status recovery blink
	outb $CPLD_STATUS_HIGH $RECOVERY_STATUS
	outb $CPLD_STATUS_LOW $RECOVERY_STATUS

	set timeout=10

	attempt_USB_recovery
	menuentry 'No valid OS. Insert NI Recovery key and reboot' {
		reboot
	}
fi
