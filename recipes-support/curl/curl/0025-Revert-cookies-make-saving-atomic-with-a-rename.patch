From fa42abc23825f0a24d7babc40939712ababb35ef Mon Sep 17 00:00:00 2001
From: Richard Tollerton <rich.tollerton@ni.com>
Date: Thu, 25 Mar 2021 18:36:59 -0500
Subject: [PATCH 25/25] Revert "cookies: make saving atomic with a rename"

This reverts commit b834890a3fa3f525cd8ef4e99554cdb4558d7e1b.

Uses MoveFileEx() on Win32, which does not exist on Phar Lap.

Upstream-Status: Inappropriate [wacky builds]
Signed-off-by: Richard Tollerton <rich.tollerton@ni.com>
---
 lib/cookie.c | 79 +++++++++++-----------------------------------------
 1 file changed, 16 insertions(+), 63 deletions(-)

diff --git a/lib/cookie.c b/lib/cookie.c
index e3746850c..8de28473b 100644
--- a/lib/cookie.c
+++ b/lib/cookie.c
@@ -97,7 +97,6 @@ Example set of cookies:
 #include "curl_memrchr.h"
 #include "inet_pton.h"
 #include "parsedate.h"
-#include "rand.h"
 
 /* The last 3 #include files should be in this order */
 #include "curl_printf.h"
@@ -1493,31 +1492,6 @@ static char *get_netscape_format(const struct Cookie *co)
     co->value?co->value:"");
 }
 
-/* return 0 on success, 1 on error */
-static int xrename(const char *oldpath, const char *newpath)
-{
-#ifdef WIN32
-  /* rename() on Windows doesn't overwrite, so we can't use it here.
-     MoveFileExA() will overwrite and is usually atomic, however it fails
-     when there are open handles to the file. */
-  const int max_wait_ms = 1000;
-  struct curltime start = Curl_now();
-  for(;;) {
-    timediff_t diff;
-    if(MoveFileExA(oldpath, newpath, MOVEFILE_REPLACE_EXISTING))
-      break;
-    diff = Curl_timediff(Curl_now(), start);
-    if(diff < 0 || diff > max_wait_ms)
-      return 1;
-    Sleep(1);
-  }
-#else
-  if(rename(oldpath, newpath))
-    return 1;
-#endif
-  return 0;
-}
-
 /*
  * cookie_output()
  *
@@ -1526,14 +1500,11 @@ static int xrename(const char *oldpath, const char *newpath)
  *
  * The function returns non-zero on write failure.
  */
-static int cookie_output(struct Curl_easy *data,
-                         struct CookieInfo *c, const char *filename)
+static int cookie_output(struct CookieInfo *c, const char *dumphere)
 {
   struct Cookie *co;
-  FILE *out = NULL;
+  FILE *out;
   bool use_stdout = FALSE;
-  char *tempstore = NULL;
-  bool error = false;
 
   if(!c)
     /* no cookie engine alive */
@@ -1542,24 +1513,16 @@ static int cookie_output(struct Curl_easy *data,
   /* at first, remove expired cookies */
   remove_expired(c);
 
-  if(!strcmp("-", filename)) {
+  if(!strcmp("-", dumphere)) {
     /* use stdout */
     out = stdout;
     use_stdout = TRUE;
   }
   else {
-    unsigned char randsuffix[9];
-
-    if(Curl_rand_hex(data, randsuffix, sizeof(randsuffix)))
-      return 2;
-
-    tempstore = aprintf("%s.%s.tmp", filename, randsuffix);
-    if(!tempstore)
-      return 1;
-
-    out = fopen(tempstore, FOPEN_WRITETEXT);
-    if(!out)
-      goto error;
+    out = fopen(dumphere, FOPEN_WRITETEXT);
+    if(!out) {
+      return 1; /* failure */
+    }
   }
 
   fputs("# Netscape HTTP Cookie File\n"
@@ -1574,7 +1537,9 @@ static int cookie_output(struct Curl_easy *data,
 
     array = calloc(1, sizeof(struct Cookie *) * c->numcookies);
     if(!array) {
-      goto error;
+      if(!use_stdout)
+        fclose(out);
+      return 1;
     }
 
     /* only sort the cookies with a domain property */
@@ -1593,7 +1558,9 @@ static int cookie_output(struct Curl_easy *data,
       if(format_ptr == NULL) {
         fprintf(out, "#\n# Fatal libcurl error\n");
         free(array);
-        goto error;
+        if(!use_stdout)
+          fclose(out);
+        return 1;
       }
       fprintf(out, "%s\n", format_ptr);
       free(format_ptr);
@@ -1601,24 +1568,10 @@ static int cookie_output(struct Curl_easy *data,
 
     free(array);
   }
-
-  if(!use_stdout) {
+  if(!use_stdout)
     fclose(out);
-    out = NULL;
-    if(xrename(tempstore, filename)) {
-      unlink(tempstore);
-      goto error;
-    }
-  }
 
-  goto cleanup;
-error:
-  error = true;
-cleanup:
-  if(out && !use_stdout)
-    fclose(out);
-  free(tempstore);
-  return error ? 1 : 0;
+  return 0;
 }
 
 static struct curl_slist *cookie_list(struct Curl_easy *data)
@@ -1677,7 +1630,7 @@ void Curl_flush_cookies(struct Curl_easy *data, bool cleanup)
     Curl_share_lock(data, CURL_LOCK_DATA_COOKIE, CURL_LOCK_ACCESS_SINGLE);
 
     /* if we have a destination file for all the cookies to get dumped to */
-    if(cookie_output(data, data->cookies, data->set.str[STRING_COOKIEJAR]))
+    if(cookie_output(data->cookies, data->set.str[STRING_COOKIEJAR]))
       infof(data, "WARNING: failed to save cookies in %s\n",
             data->set.str[STRING_COOKIEJAR]);
   }
-- 
2.30.0

