From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Haris Okanovic <haris.okanovic@ni.com>
Date: Mon, 21 Jul 2014 09:23:45 -0500
Subject: [PATCH] Decorate API functions on Windows with __cdecl

Adds __cdecl decoration to API functions on Win32 systems so that cURL
may be used in applications compiled with /Gz (__stdcall).

Upstream-Status: Pending [Needs clean-up]

diff --git a/include/curl/curl.h b/include/curl/curl.h
index 71204ee..99ba370 100644
--- a/include/curl/curl.h
+++ b/include/curl/curl.h
@@ -112,6 +112,12 @@ typedef void CURLSH;
  * libcurl external API function linkage decorations.
  */
 
+#if defined(WIN32) || defined(_WIN32)
+#  define CURL_FUNCC __cdecl
+#else
+#  define CURL_FUNCC
+#endif /* defined(WIN32) || defined(_WIN32) */
+
 #ifdef CURL_STATICLIB
 #  define CURL_EXTERN
 #elif defined(CURL_WIN32) || defined(__SYMBIAN32__) || \
@@ -217,7 +223,7 @@ struct curl_httppost {
 
 /* This is the CURLOPT_PROGRESSFUNCTION callback prototype. It is now
    considered deprecated but was the only choice up until 7.31.0 */
-typedef int (*curl_progress_callback)(void *clientp,
+typedef int (CURL_FUNCC *curl_progress_callback)(void *clientp,
                                       double dltotal,
                                       double dlnow,
                                       double ultotal,
@@ -226,11 +232,11 @@ typedef int (*curl_progress_callback)(void *clientp,
 /* This is the CURLOPT_XFERINFOFUNCTION callback prototype. It was introduced
    in 7.32.0, avoids the use of floating point numbers and provides more
    detailed information. */
-typedef int (*curl_xferinfo_callback)(void *clientp,
-                                      curl_off_t dltotal,
-                                      curl_off_t dlnow,
-                                      curl_off_t ultotal,
-                                      curl_off_t ulnow);
+typedef int (CURL_FUNCC *curl_xferinfo_callback)(void *clientp,
+                                                 curl_off_t dltotal,
+                                                 curl_off_t dlnow,
+                                                 curl_off_t ultotal,
+                                                 curl_off_t ulnow);
 
 #ifndef CURL_MAX_READ_SIZE
   /* The maximum receive buffer size configurable via CURLOPT_BUFFERSIZE. */
@@ -258,14 +264,15 @@ typedef int (*curl_xferinfo_callback)(void *clientp,
    will signal libcurl to pause receiving on the current transfer. */
 #define CURL_WRITEFUNC_PAUSE 0x10000001
 
-typedef size_t (*curl_write_callback)(char *buffer,
-                                      size_t size,
-                                      size_t nitems,
-                                      void *outstream);
+typedef size_t (CURL_FUNCC *curl_write_callback)(char *buffer,
+                                                 size_t size,
+                                                 size_t nitems,
+                                                 void *outstream);
 
 /* This callback will be called when a new resolver request is made */
-typedef int (*curl_resolver_start_callback)(void *resolver_state,
-                                            void *reserved, void *userdata);
+typedef int (CURL_FUNCC *curl_resolver_start_callback)(void *resolver_state,
+                                                       void *reserved,
+                                                       void *userdata);
 
 /* enumeration of file types */
 typedef enum {
@@ -326,9 +333,9 @@ struct curl_fileinfo {
 /* if splitting of data transfer is enabled, this callback is called before
    download of an individual chunk started. Note that parameter "remains" works
    only for FTP wildcard downloading (for now), otherwise is not used */
-typedef long (*curl_chunk_bgn_callback)(const void *transfer_info,
-                                        void *ptr,
-                                        int remains);
+typedef long (CURL_FUNCC *curl_chunk_bgn_callback)(const void *transfer_info,
+                                                   void *ptr,
+                                                   int remains);
 
 /* return codes for CURLOPT_CHUNK_END_FUNCTION */
 #define CURL_CHUNK_END_FUNC_OK      0
@@ -340,7 +347,7 @@ typedef long (*curl_chunk_bgn_callback)(const void *transfer_info,
    Even if downloading of this chunk was skipped in CHUNK_BGN_FUNC.
    This is the reason why we don't need "transfer_info" parameter in this
    callback and we are not interested in "remains" parameter too. */
-typedef long (*curl_chunk_end_callback)(void *ptr);
+typedef long (CURL_FUNCC *curl_chunk_end_callback)(void *ptr);
 
 /* return codes for FNMATCHFUNCTION */
 #define CURL_FNMATCHFUNC_MATCH    0 /* string corresponds to the pattern */
@@ -349,18 +356,18 @@ typedef long (*curl_chunk_end_callback)(void *ptr);
 
 /* callback type for wildcard downloading pattern matching. If the
    string matches the pattern, return CURL_FNMATCHFUNC_MATCH value, etc. */
-typedef int (*curl_fnmatch_callback)(void *ptr,
-                                     const char *pattern,
-                                     const char *string);
+typedef int (CURL_FUNCC *curl_fnmatch_callback)(void *ptr,
+                                                const char *pattern,
+                                                const char *string);
 
 /* These are the return codes for the seek callbacks */
 #define CURL_SEEKFUNC_OK       0
 #define CURL_SEEKFUNC_FAIL     1 /* fail the entire transfer */
 #define CURL_SEEKFUNC_CANTSEEK 2 /* tell libcurl seeking can't be done, so
                                     libcurl might try other means instead */
-typedef int (*curl_seek_callback)(void *instream,
-                                  curl_off_t offset,
-                                  int origin); /* 'whence' */
+typedef int (CURL_FUNCC *curl_seek_callback)(void *instream,
+                                             curl_off_t offset,
+                                             int origin); /* 'whence' */
 
 /* This is a return code for the read callback that, when returned, will
    signal libcurl to immediately abort the current transfer. */
@@ -376,13 +383,13 @@ typedef int (*curl_seek_callback)(void *instream,
   want to abort the request */
 #define CURL_TRAILERFUNC_ABORT 1
 
-typedef size_t (*curl_read_callback)(char *buffer,
-                                      size_t size,
-                                      size_t nitems,
-                                      void *instream);
+typedef size_t (CURL_FUNCC *curl_read_callback)(char *buffer,
+                                                size_t size,
+                                                size_t nitems,
+                                                void *instream);
 
-typedef int (*curl_trailer_callback)(struct curl_slist **list,
-                                      void *userdata);
+typedef int (CURL_FUNCC *curl_trailer_callback)(struct curl_slist **list,
+                                                void *userdata);
 
 typedef enum {
   CURLSOCKTYPE_IPCXN,  /* socket created for a specific IP connection */
@@ -397,9 +404,9 @@ typedef enum {
                                 CURLE_ABORTED_BY_CALLBACK */
 #define CURL_SOCKOPT_ALREADY_CONNECTED 2
 
-typedef int (*curl_sockopt_callback)(void *clientp,
-                                     curl_socket_t curlfd,
-                                     curlsocktype purpose);
+typedef int (CURL_FUNCC *curl_sockopt_callback)(void *clientp,
+                                                curl_socket_t curlfd,
+                                                curlsocktype purpose);
 
 struct curl_sockaddr {
   int family;
@@ -412,12 +419,12 @@ struct curl_sockaddr {
 };
 
 typedef curl_socket_t
-(*curl_opensocket_callback)(void *clientp,
-                            curlsocktype purpose,
-                            struct curl_sockaddr *address);
+(CURL_FUNCC *curl_opensocket_callback)(void *clientp,
+                                       curlsocktype purpose,
+                                       struct curl_sockaddr *address);
 
 typedef int
-(*curl_closesocket_callback)(void *clientp, curl_socket_t item);
+(CURL_FUNCC *curl_closesocket_callback)(void *clientp, curl_socket_t item);
 
 typedef enum {
   CURLIOE_OK,            /* I/O operation successful */
@@ -432,9 +439,9 @@ typedef enum {
   CURLIOCMD_LAST         /* never use */
 } curliocmd;
 
-typedef curlioerr (*curl_ioctl_callback)(CURL *handle,
-                                         int cmd,
-                                         void *clientp);
+typedef curlioerr (CURL_FUNCC *curl_ioctl_callback)(CURL *handle,
+                                                    int cmd,
+                                                    void *clientp);
 
 #ifndef CURL_DID_MEMORY_FUNC_TYPEDEFS
 /*
@@ -443,11 +450,11 @@ typedef curlioerr (*curl_ioctl_callback)(CURL *handle,
  * curl_global_init_mem() function to set user defined memory management
  * callback routines.
  */
-typedef void *(*curl_malloc_callback)(size_t size);
-typedef void (*curl_free_callback)(void *ptr);
-typedef void *(*curl_realloc_callback)(void *ptr, size_t size);
-typedef char *(*curl_strdup_callback)(const char *str);
-typedef void *(*curl_calloc_callback)(size_t nmemb, size_t size);
+typedef void *(CURL_FUNCC *curl_malloc_callback)(size_t size);
+typedef void (CURL_FUNCC *curl_free_callback)(void *ptr);
+typedef void *(CURL_FUNCC *curl_realloc_callback)(void *ptr, size_t size);
+typedef char *(CURL_FUNCC *curl_strdup_callback)(const char *str);
+typedef void *(CURL_FUNCC *curl_calloc_callback)(size_t nmemb, size_t size);
 
 #define CURL_DID_MEMORY_FUNC_TYPEDEFS
 #endif
@@ -464,7 +471,7 @@ typedef enum {
   CURLINFO_END
 } curl_infotype;
 
-typedef int (*curl_debug_callback)
+typedef int (CURL_FUNCC *curl_debug_callback)
        (CURL *handle,      /* the handle/transfer this concerns */
         curl_infotype type, /* what kind of data */
         char *data,        /* points to the data */
@@ -733,14 +740,15 @@ typedef enum {
 } CURLproxycode;
 
 /* This prototype applies to all conversion callbacks */
-typedef CURLcode (*curl_conv_callback)(char *buffer, size_t length);
+typedef CURLcode (CURL_FUNCC *curl_conv_callback)(char *buffer, size_t length);
 
-typedef CURLcode (*curl_ssl_ctx_callback)(CURL *curl,    /* easy handle */
-                                          void *ssl_ctx, /* actually an OpenSSL
-                                                            or WolfSSL SSL_CTX,
-                                                            or an mbedTLS
-                                                          mbedtls_ssl_config */
-                                          void *userptr);
+typedef CURLcode (CURL_FUNCC *curl_ssl_ctx_callback)(
+  CURL *curl,    /* easy handle */
+  void *ssl_ctx, /* actually an OpenSSL
+                    or WolfSSL SSL_CTX,
+                    or an mbedTLS
+                    mbedtls_ssl_config */
+  void *userptr);
 
 typedef enum {
   CURLPROXY_HTTP = 0,   /* added in 7.10, new in 7.19.4 default is to use
@@ -845,12 +853,12 @@ enum curl_khmatch {
   CURLKHMATCH_LAST      /* not for use, only a marker for last-in-list */
 };
 
-typedef int
-  (*curl_sshkeycallback) (CURL *easy,     /* easy handle */
-                          const struct curl_khkey *knownkey, /* known */
-                          const struct curl_khkey *foundkey, /* found */
-                          enum curl_khmatch, /* libcurl's view on the keys */
-                          void *clientp); /* custom pointer passed from app */
+typedef int (CURL_FUNCC *curl_sshkeycallback) (
+    CURL *easy,     /* easy handle */
+    const struct curl_khkey *knownkey, /* known */
+    const struct curl_khkey *foundkey, /* found */
+    enum curl_khmatch, /* libcurl's view on the keys */
+    void *clientp); /* custom pointer passed from app */
 
 /* parameter for the CURLOPT_USE_SSL option */
 typedef enum {
@@ -2230,8 +2238,9 @@ typedef enum {
 
 /* curl_strequal() and curl_strnequal() are subject for removal in a future
    release */
-CURL_EXTERN int curl_strequal(const char *s1, const char *s2);
-CURL_EXTERN int curl_strnequal(const char *s1, const char *s2, size_t n);
+CURL_EXTERN int CURL_FUNCC curl_strequal(const char *s1, const char *s2);
+CURL_EXTERN int CURL_FUNCC curl_strnequal(const char *s1, const char *s2,
+                                          size_t n);
 
 /* Mime/form handling support. */
 typedef struct curl_mime      curl_mime;      /* Mime context. */
@@ -2245,7 +2254,7 @@ typedef struct curl_mimepart  curl_mimepart;  /* Mime part context. */
  * Create a mime context and return its handle. The easy parameter is the
  * target handle.
  */
-CURL_EXTERN curl_mime *curl_mime_init(CURL *easy);
+CURL_EXTERN curl_mime * CURL_FUNCC curl_mime_init(CURL *easy);
 
 /*
  * NAME curl_mime_free()
@@ -2254,7 +2263,7 @@ CURL_EXTERN curl_mime *curl_mime_init(CURL *easy);
  *
  * release a mime handle and its substructures.
  */
-CURL_EXTERN void curl_mime_free(curl_mime *mime);
+CURL_EXTERN void CURL_FUNCC curl_mime_free(curl_mime *mime);
 
 /*
  * NAME curl_mime_addpart()
@@ -2264,7 +2273,7 @@ CURL_EXTERN void curl_mime_free(curl_mime *mime);
  * Append a new empty part to the given mime context and return a handle to
  * the created part.
  */
-CURL_EXTERN curl_mimepart *curl_mime_addpart(curl_mime *mime);
+CURL_EXTERN curl_mimepart * CURL_FUNCC curl_mime_addpart(curl_mime *mime);
 
 /*
  * NAME curl_mime_name()
@@ -2273,7 +2282,8 @@ CURL_EXTERN curl_mimepart *curl_mime_addpart(curl_mime *mime);
  *
  * Set mime/form part name.
  */
-CURL_EXTERN CURLcode curl_mime_name(curl_mimepart *part, const char *name);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_name(curl_mimepart *part,
+                                               const char *name);
 
 /*
  * NAME curl_mime_filename()
@@ -2282,7 +2292,7 @@ CURL_EXTERN CURLcode curl_mime_name(curl_mimepart *part, const char *name);
  *
  * Set mime part remote file name.
  */
-CURL_EXTERN CURLcode curl_mime_filename(curl_mimepart *part,
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_filename(curl_mimepart *part,
                                         const char *filename);
 
 /*
@@ -2292,7 +2302,8 @@ CURL_EXTERN CURLcode curl_mime_filename(curl_mimepart *part,
  *
  * Set mime part type.
  */
-CURL_EXTERN CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_type(curl_mimepart *part,
+                                               const char *mimetype);
 
 /*
  * NAME curl_mime_encoder()
@@ -2301,8 +2312,8 @@ CURL_EXTERN CURLcode curl_mime_type(curl_mimepart *part, const char *mimetype);
  *
  * Set mime data transfer encoder.
  */
-CURL_EXTERN CURLcode curl_mime_encoder(curl_mimepart *part,
-                                       const char *encoding);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_encoder(curl_mimepart *part,
+                                                  const char *encoding);
 
 /*
  * NAME curl_mime_data()
@@ -2311,8 +2322,9 @@ CURL_EXTERN CURLcode curl_mime_encoder(curl_mimepart *part,
  *
  * Set mime part data source from memory data,
  */
-CURL_EXTERN CURLcode curl_mime_data(curl_mimepart *part,
-                                    const char *data, size_t datasize);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_data(curl_mimepart *part,
+                                               const char *data,
+                                               size_t datasize);
 
 /*
  * NAME curl_mime_filedata()
@@ -2321,8 +2333,8 @@ CURL_EXTERN CURLcode curl_mime_data(curl_mimepart *part,
  *
  * Set mime part data source from named file.
  */
-CURL_EXTERN CURLcode curl_mime_filedata(curl_mimepart *part,
-                                        const char *filename);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_filedata(curl_mimepart *part,
+                                                   const char *filename);
 
 /*
  * NAME curl_mime_data_cb()
@@ -2331,12 +2343,12 @@ CURL_EXTERN CURLcode curl_mime_filedata(curl_mimepart *part,
  *
  * Set mime part data source from callback function.
  */
-CURL_EXTERN CURLcode curl_mime_data_cb(curl_mimepart *part,
-                                       curl_off_t datasize,
-                                       curl_read_callback readfunc,
-                                       curl_seek_callback seekfunc,
-                                       curl_free_callback freefunc,
-                                       void *arg);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_data_cb(curl_mimepart *part,
+                                                  curl_off_t datasize,
+                                                  curl_read_callback readfunc,
+                                                  curl_seek_callback seekfunc,
+                                                  curl_free_callback freefunc,
+                                                  void *arg);
 
 /*
  * NAME curl_mime_subparts()
@@ -2345,8 +2357,8 @@ CURL_EXTERN CURLcode curl_mime_data_cb(curl_mimepart *part,
  *
  * Set mime part data source from subparts.
  */
-CURL_EXTERN CURLcode curl_mime_subparts(curl_mimepart *part,
-                                        curl_mime *subparts);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_subparts(curl_mimepart *part,
+                                                   curl_mime *subparts);
 /*
  * NAME curl_mime_headers()
  *
@@ -2354,9 +2366,9 @@ CURL_EXTERN CURLcode curl_mime_subparts(curl_mimepart *part,
  *
  * Set mime part headers.
  */
-CURL_EXTERN CURLcode curl_mime_headers(curl_mimepart *part,
-                                       struct curl_slist *headers,
-                                       int take_ownership);
+CURL_EXTERN CURLcode CURL_FUNCC curl_mime_headers(curl_mimepart *part,
+                                                  struct curl_slist *headers,
+                                                  int take_ownership);
 
 typedef enum {
   CURLFORM_NOTHING,        /********* the first one is unused ************/
@@ -2432,9 +2444,10 @@ typedef enum {
  * adds one part that together construct a full post. Then use
  * CURLOPT_HTTPPOST to send it off to libcurl.
  */
-CURL_EXTERN CURLFORMcode curl_formadd(struct curl_httppost **httppost,
-                                      struct curl_httppost **last_post,
-                                      ...);
+CURL_EXTERN CURLFORMcode CURL_FUNCC curl_formadd(
+  struct curl_httppost **httppost,
+  struct curl_httppost **last_post,
+  ...);
 
 /*
  * callback function for curl_formget()
@@ -2444,8 +2457,8 @@ CURL_EXTERN CURLFORMcode curl_formadd(struct curl_httppost **httppost,
  * Should return the buffer length passed to it as the argument "len" on
  *   success.
  */
-typedef size_t (*curl_formget_callback)(void *arg, const char *buf,
-                                        size_t len);
+typedef size_t (CURL_FUNCC *curl_formget_callback)(void *arg, const char *buf,
+                                                   size_t len);
 
 /*
  * NAME curl_formget()
@@ -2457,8 +2470,8 @@ typedef size_t (*curl_formget_callback)(void *arg, const char *buf,
  * the curl_formget_callback function.
  * Returns 0 on success.
  */
-CURL_EXTERN int curl_formget(struct curl_httppost *form, void *arg,
-                             curl_formget_callback append);
+CURL_EXTERN int CURL_FUNCC curl_formget(struct curl_httppost *form, void *arg,
+                                        curl_formget_callback append);
 /*
  * NAME curl_formfree()
  *
@@ -2466,7 +2479,7 @@ CURL_EXTERN int curl_formget(struct curl_httppost *form, void *arg,
  *
  * Free a multipart formpost previously built with curl_formadd().
  */
-CURL_EXTERN void curl_formfree(struct curl_httppost *form);
+CURL_EXTERN void CURL_FUNCC curl_formfree(struct curl_httppost *form);
 
 /*
  * NAME curl_getenv()
@@ -2476,7 +2489,7 @@ CURL_EXTERN void curl_formfree(struct curl_httppost *form);
  * Returns a malloc()'ed string that MUST be curl_free()ed after usage is
  * complete. DEPRECATED - see lib/README.curlx
  */
-CURL_EXTERN char *curl_getenv(const char *variable);
+CURL_EXTERN char * CURL_FUNCC curl_getenv(const char *variable);
 
 /*
  * NAME curl_version()
@@ -2485,7 +2498,7 @@ CURL_EXTERN char *curl_getenv(const char *variable);
  *
  * Returns a static ascii string of the libcurl version.
  */
-CURL_EXTERN char *curl_version(void);
+CURL_EXTERN char * CURL_FUNCC curl_version(void);
 
 /*
  * NAME curl_easy_escape()
@@ -2496,12 +2509,12 @@ CURL_EXTERN char *curl_version(void);
  * %XX versions). This function returns a new allocated string or NULL if an
  * error occurred.
  */
-CURL_EXTERN char *curl_easy_escape(CURL *handle,
+CURL_EXTERN char * CURL_FUNCC curl_easy_escape(CURL *handle,
                                    const char *string,
                                    int length);
 
 /* the previous version: */
-CURL_EXTERN char *curl_escape(const char *string,
+CURL_EXTERN char * CURL_FUNCC curl_escape(const char *string,
                               int length);
 
 
@@ -2516,13 +2529,13 @@ CURL_EXTERN char *curl_escape(const char *string,
  * Conversion Note: On non-ASCII platforms the ASCII %XX codes are
  * converted into the host encoding.
  */
-CURL_EXTERN char *curl_easy_unescape(CURL *handle,
+CURL_EXTERN char * CURL_FUNCC curl_easy_unescape(CURL *handle,
                                      const char *string,
                                      int length,
                                      int *outlength);
 
 /* the previous version */
-CURL_EXTERN char *curl_unescape(const char *string,
+CURL_EXTERN char * CURL_FUNCC curl_unescape(const char *string,
                                 int length);
 
 /*
@@ -2533,7 +2546,7 @@ CURL_EXTERN char *curl_unescape(const char *string,
  * Provided for de-allocation in the same translation unit that did the
  * allocation. Added in libcurl 7.10
  */
-CURL_EXTERN void curl_free(void *p);
+CURL_EXTERN void CURL_FUNCC curl_free(void *p);
 
 /*
  * NAME curl_global_init()
@@ -2545,7 +2558,7 @@ CURL_EXTERN void curl_free(void *p);
  *
  * This function is not thread-safe!
  */
-CURL_EXTERN CURLcode curl_global_init(long flags);
+CURL_EXTERN CURLcode CURL_FUNCC curl_global_init(long flags);
 
 /*
  * NAME curl_global_init_mem()
@@ -2560,12 +2573,12 @@ CURL_EXTERN CURLcode curl_global_init(long flags);
  * callback routines will be invoked by this library instead of the system
  * memory management routines like malloc, free etc.
  */
-CURL_EXTERN CURLcode curl_global_init_mem(long flags,
-                                          curl_malloc_callback m,
-                                          curl_free_callback f,
-                                          curl_realloc_callback r,
-                                          curl_strdup_callback s,
-                                          curl_calloc_callback c);
+CURL_EXTERN CURLcode CURL_FUNCC curl_global_init_mem(long flags,
+                                                     curl_malloc_callback m,
+                                                     curl_free_callback f,
+                                                     curl_realloc_callback r,
+                                                     curl_strdup_callback s,
+                                                     curl_calloc_callback c);
 
 /*
  * NAME curl_global_cleanup()
@@ -2575,7 +2588,7 @@ CURL_EXTERN CURLcode curl_global_init_mem(long flags,
  * curl_global_cleanup() should be invoked exactly once for each application
  * that uses libcurl
  */
-CURL_EXTERN void curl_global_cleanup(void);
+CURL_EXTERN void CURL_FUNCC curl_global_cleanup(void);
 
 /* linked-list structure for the CURLOPT_QUOTE option (and other) */
 struct curl_slist {
@@ -2622,8 +2635,10 @@ typedef enum {
   CURLSSLSET_NO_BACKENDS /* libcurl was built without any SSL support */
 } CURLsslset;
 
-CURL_EXTERN CURLsslset curl_global_sslset(curl_sslbackend id, const char *name,
-                                          const curl_ssl_backend ***avail);
+CURL_EXTERN CURLsslset CURL_FUNCC curl_global_sslset(
+  curl_sslbackend id,
+  const char *name,
+  const curl_ssl_backend ***avail);
 
 /*
  * NAME curl_slist_append()
@@ -2633,8 +2648,9 @@ CURL_EXTERN CURLsslset curl_global_sslset(curl_sslbackend id, const char *name,
  * Appends a string to a linked list. If no list exists, it will be created
  * first. Returns the new list, after appending.
  */
-CURL_EXTERN struct curl_slist *curl_slist_append(struct curl_slist *,
-                                                 const char *);
+CURL_EXTERN struct curl_slist * CURL_FUNCC curl_slist_append(
+  struct curl_slist *,
+  const char *);
 
 /*
  * NAME curl_slist_free_all()
@@ -2643,7 +2659,7 @@ CURL_EXTERN struct curl_slist *curl_slist_append(struct curl_slist *,
  *
  * free a previously built curl_slist.
  */
-CURL_EXTERN void curl_slist_free_all(struct curl_slist *);
+CURL_EXTERN void CURL_FUNCC curl_slist_free_all(struct curl_slist *);
 
 /*
  * NAME curl_getdate()
@@ -2654,7 +2670,8 @@ CURL_EXTERN void curl_slist_free_all(struct curl_slist *);
  * the first argument. The time argument in the second parameter is unused
  * and should be set to NULL.
  */
-CURL_EXTERN time_t curl_getdate(const char *p, const time_t *unused);
+CURL_EXTERN time_t CURL_FUNCC curl_getdate(const char *p,
+                                           const time_t *unused);
 
 /* info about the certificate chain, only for OpenSSL, GnuTLS, Schannel, NSS
    and GSKit builds. Asked for with CURLOPT_CERTINFO / CURLINFO_CERTINFO */
@@ -2807,13 +2824,13 @@ typedef enum {
   CURL_LOCK_ACCESS_LAST        /* never use */
 } curl_lock_access;
 
-typedef void (*curl_lock_function)(CURL *handle,
-                                   curl_lock_data data,
-                                   curl_lock_access locktype,
-                                   void *userptr);
-typedef void (*curl_unlock_function)(CURL *handle,
-                                     curl_lock_data data,
-                                     void *userptr);
+typedef void (CURL_FUNCC *curl_lock_function)(CURL *handle,
+                                              curl_lock_data data,
+                                              curl_lock_access locktype,
+                                              void *userptr);
+typedef void (CURL_FUNCC *curl_unlock_function)(CURL *handle,
+                                                curl_lock_data data,
+                                                void *userptr);
 
 
 typedef enum {
@@ -2837,9 +2854,9 @@ typedef enum {
   CURLSHOPT_LAST  /* never use */
 } CURLSHoption;
 
-CURL_EXTERN CURLSH *curl_share_init(void);
-CURL_EXTERN CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);
-CURL_EXTERN CURLSHcode curl_share_cleanup(CURLSH *);
+CURL_EXTERN CURLSH * CURL_FUNCC curl_share_init(void);
+CURL_EXTERN CURLSHcode CURL_FUNCC curl_share_setopt(CURLSH *, CURLSHoption option, ...);
+CURL_EXTERN CURLSHcode CURL_FUNCC curl_share_cleanup(CURLSH *);
 
 /****************************************************************************
  * Structures for querying information about the curl library at runtime.
@@ -2962,7 +2979,7 @@ typedef struct curl_version_info_data curl_version_info_data;
  * This function returns a pointer to a static copy of the version info
  * struct. See above.
  */
-CURL_EXTERN curl_version_info_data *curl_version_info(CURLversion);
+CURL_EXTERN curl_version_info_data * CURL_FUNCC curl_version_info(CURLversion);
 
 /*
  * NAME curl_easy_strerror()
@@ -2973,7 +2990,7 @@ CURL_EXTERN curl_version_info_data *curl_version_info(CURLversion);
  * into the equivalent human readable error string.  This is useful
  * for printing meaningful error messages.
  */
-CURL_EXTERN const char *curl_easy_strerror(CURLcode);
+CURL_EXTERN const char * CURL_FUNCC curl_easy_strerror(CURLcode);
 
 /*
  * NAME curl_share_strerror()
@@ -2984,7 +3001,7 @@ CURL_EXTERN const char *curl_easy_strerror(CURLcode);
  * into the equivalent human readable error string.  This is useful
  * for printing meaningful error messages.
  */
-CURL_EXTERN const char *curl_share_strerror(CURLSHcode);
+CURL_EXTERN const char * CURL_FUNCC curl_share_strerror(CURLSHcode);
 
 /*
  * NAME curl_easy_pause()
@@ -2995,7 +3012,7 @@ CURL_EXTERN const char *curl_share_strerror(CURLSHcode);
  * state by setting the bitmask, use the convenience defines below.
  *
  */
-CURL_EXTERN CURLcode curl_easy_pause(CURL *handle, int bitmask);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_pause(CURL *handle, int bitmask);
 
 #define CURLPAUSE_RECV      (1<<0)
 #define CURLPAUSE_RECV_CONT (0)
diff --git a/include/curl/easy.h b/include/curl/easy.h
index 2dbfb26..2c0ff4f 100644
--- a/include/curl/easy.h
+++ b/include/curl/easy.h
@@ -36,10 +36,11 @@ struct curl_blob {
                          left zeroes */
 };
 
-CURL_EXTERN CURL *curl_easy_init(void);
-CURL_EXTERN CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...);
-CURL_EXTERN CURLcode curl_easy_perform(CURL *curl);
-CURL_EXTERN void curl_easy_cleanup(CURL *curl);
+CURL_EXTERN CURL * CURL_FUNCC curl_easy_init(void);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_setopt(CURL *curl, CURLoption option,
+                                                 ...);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_perform(CURL *curl);
+CURL_EXTERN void CURL_FUNCC curl_easy_cleanup(CURL *curl);
 
 /*
  * NAME curl_easy_getinfo()
@@ -54,7 +55,8 @@ CURL_EXTERN void curl_easy_cleanup(CURL *curl);
  * performed transfer, all results from this function are undefined until the
  * transfer is completed.
  */
-CURL_EXTERN CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_getinfo(CURL *curl, CURLINFO info,
+                                                  ...);
 
 
 /*
@@ -69,7 +71,7 @@ CURL_EXTERN CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
  * curl_easy_duphandle() for each new thread to avoid a series of identical
  * curl_easy_setopt() invokes in every thread.
  */
-CURL_EXTERN CURL *curl_easy_duphandle(CURL *curl);
+CURL_EXTERN CURL * CURL_FUNCC curl_easy_duphandle(CURL *curl);
 
 /*
  * NAME curl_easy_reset()
@@ -82,7 +84,7 @@ CURL_EXTERN CURL *curl_easy_duphandle(CURL *curl);
  * It does keep: live connections, the Session ID cache, the DNS cache and the
  * cookies.
  */
-CURL_EXTERN void curl_easy_reset(CURL *curl);
+CURL_EXTERN void CURL_FUNCC curl_easy_reset(CURL *curl);
 
 /*
  * NAME curl_easy_recv()
@@ -92,8 +94,8 @@ CURL_EXTERN void curl_easy_reset(CURL *curl);
  * Receives data from the connected socket. Use after successful
  * curl_easy_perform() with CURLOPT_CONNECT_ONLY option.
  */
-CURL_EXTERN CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen,
-                                    size_t *n);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_recv(CURL *curl, void *buffer,
+                                               size_t buflen, size_t *n);
 
 /*
  * NAME curl_easy_send()
@@ -103,7 +105,7 @@ CURL_EXTERN CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen,
  * Sends data over the connected socket. Use after successful
  * curl_easy_perform() with CURLOPT_CONNECT_ONLY option.
  */
-CURL_EXTERN CURLcode curl_easy_send(CURL *curl, const void *buffer,
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_send(CURL *curl, const void *buffer,
                                     size_t buflen, size_t *n);
 
 
@@ -114,7 +116,7 @@ CURL_EXTERN CURLcode curl_easy_send(CURL *curl, const void *buffer,
  *
  * Performs connection upkeep for the given session handle.
  */
-CURL_EXTERN CURLcode curl_easy_upkeep(CURL *curl);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_upkeep(CURL *curl);
 
 #ifdef  __cplusplus
 }
diff --git a/include/curl/multi.h b/include/curl/multi.h
index 37f9829..a7da074 100644
--- a/include/curl/multi.h
+++ b/include/curl/multi.h
@@ -124,7 +124,7 @@ struct curl_waitfd {
  *
  * Returns: a new CURLM handle to use in all 'curl_multi' functions.
  */
-CURL_EXTERN CURLM *curl_multi_init(void);
+CURL_EXTERN CURLM * CURL_FUNCC curl_multi_init(void);
 
 /*
  * Name:    curl_multi_add_handle()
@@ -133,8 +133,8 @@ CURL_EXTERN CURLM *curl_multi_init(void);
  *
  * Returns: CURLMcode type, general multi error code.
  */
-CURL_EXTERN CURLMcode curl_multi_add_handle(CURLM *multi_handle,
-                                            CURL *curl_handle);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_add_handle(CURLM *multi_handle,
+                                                       CURL *curl_handle);
 
  /*
   * Name:    curl_multi_remove_handle()
@@ -143,8 +143,8 @@ CURL_EXTERN CURLMcode curl_multi_add_handle(CURLM *multi_handle,
   *
   * Returns: CURLMcode type, general multi error code.
   */
-CURL_EXTERN CURLMcode curl_multi_remove_handle(CURLM *multi_handle,
-                                               CURL *curl_handle);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_remove_handle(CURLM *multi_handle,
+                                                          CURL *curl_handle);
 
  /*
   * Name:    curl_multi_fdset()
@@ -155,11 +155,11 @@ CURL_EXTERN CURLMcode curl_multi_remove_handle(CURLM *multi_handle,
   *
   * Returns: CURLMcode type, general multi error code.
   */
-CURL_EXTERN CURLMcode curl_multi_fdset(CURLM *multi_handle,
-                                       fd_set *read_fd_set,
-                                       fd_set *write_fd_set,
-                                       fd_set *exc_fd_set,
-                                       int *max_fd);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_fdset(CURLM *multi_handle,
+                                                  fd_set *read_fd_set,
+                                                  fd_set *write_fd_set,
+                                                  fd_set *exc_fd_set,
+                                                  int *max_fd);
 
 /*
  * Name:     curl_multi_wait()
@@ -169,11 +169,11 @@ CURL_EXTERN CURLMcode curl_multi_fdset(CURLM *multi_handle,
  *
  * Returns:  CURLMcode type, general multi error code.
  */
-CURL_EXTERN CURLMcode curl_multi_wait(CURLM *multi_handle,
-                                      struct curl_waitfd extra_fds[],
-                                      unsigned int extra_nfds,
-                                      int timeout_ms,
-                                      int *ret);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_wait(CURLM *multi_handle,
+                                                 struct curl_waitfd extra_fds[],
+                                                 unsigned int extra_nfds,
+                                                 int timeout_ms,
+                                                 int *ret);
 
 /*
  * Name:     curl_multi_poll()
@@ -183,11 +183,11 @@ CURL_EXTERN CURLMcode curl_multi_wait(CURLM *multi_handle,
  *
  * Returns:  CURLMcode type, general multi error code.
  */
-CURL_EXTERN CURLMcode curl_multi_poll(CURLM *multi_handle,
-                                      struct curl_waitfd extra_fds[],
-                                      unsigned int extra_nfds,
-                                      int timeout_ms,
-                                      int *ret);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_poll(CURLM *multi_handle,
+                                                 struct curl_waitfd extra_fds[],
+                                                 unsigned int extra_nfds,
+                                                 int timeout_ms,
+                                                 int *ret);
 
 /*
  * Name:     curl_multi_wakeup()
@@ -196,7 +196,7 @@ CURL_EXTERN CURLMcode curl_multi_poll(CURLM *multi_handle,
  *
  * Returns:  CURLMcode type, general multi error code.
  */
-CURL_EXTERN CURLMcode curl_multi_wakeup(CURLM *multi_handle);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_wakeup(CURLM *multi_handle);
 
  /*
   * Name:    curl_multi_perform()
@@ -214,8 +214,8 @@ CURL_EXTERN CURLMcode curl_multi_wakeup(CURLM *multi_handle);
   *          still have occurred problems on individual transfers even when
   *          this returns OK.
   */
-CURL_EXTERN CURLMcode curl_multi_perform(CURLM *multi_handle,
-                                         int *running_handles);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_perform(CURLM *multi_handle,
+                                                    int *running_handles);
 
  /*
   * Name:    curl_multi_cleanup()
@@ -227,7 +227,7 @@ CURL_EXTERN CURLMcode curl_multi_perform(CURLM *multi_handle,
   *
   * Returns: CURLMcode type, general multi error code.
   */
-CURL_EXTERN CURLMcode curl_multi_cleanup(CURLM *multi_handle);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_cleanup(CURLM *multi_handle);
 
 /*
  * Name:    curl_multi_info_read()
@@ -257,8 +257,8 @@ CURL_EXTERN CURLMcode curl_multi_cleanup(CURLM *multi_handle);
  *          queue (after this read) in the integer the second argument points
  *          to.
  */
-CURL_EXTERN CURLMsg *curl_multi_info_read(CURLM *multi_handle,
-                                          int *msgs_in_queue);
+CURL_EXTERN CURLMsg * CURL_FUNCC curl_multi_info_read(CURLM *multi_handle,
+                                                      int *msgs_in_queue);
 
 /*
  * Name:    curl_multi_strerror()
@@ -269,7 +269,7 @@ CURL_EXTERN CURLMsg *curl_multi_info_read(CURLM *multi_handle,
  *
  * Returns: A pointer to a null-terminated error message.
  */
-CURL_EXTERN const char *curl_multi_strerror(CURLMcode);
+CURL_EXTERN const char * CURL_FUNCC curl_multi_strerror(CURLMcode);
 
 /*
  * Name:    curl_multi_socket() and
@@ -292,13 +292,14 @@ CURL_EXTERN const char *curl_multi_strerror(CURLMcode);
 #define CURL_CSELECT_OUT  0x02
 #define CURL_CSELECT_ERR  0x04
 
-typedef int (*curl_socket_callback)(CURL *easy,      /* easy handle */
-                                    curl_socket_t s, /* socket */
-                                    int what,        /* see above */
-                                    void *userp,     /* private callback
-                                                        pointer */
-                                    void *socketp);  /* private socket
-                                                        pointer */
+typedef int (CURL_FUNCC *curl_socket_callback)(
+  CURL *easy,      /* easy handle */
+  curl_socket_t s, /* socket */
+  int what,        /* see above */
+  void *userp,     /* private callback
+                      pointer */
+  void *socketp);  /* private socket
+                      pointer */
 /*
  * Name:    curl_multi_timer_callback
  *
@@ -309,21 +310,23 @@ typedef int (*curl_socket_callback)(CURL *easy,      /* easy handle */
  *
  * Returns: The callback should return zero.
  */
-typedef int (*curl_multi_timer_callback)(CURLM *multi,    /* multi handle */
-                                         long timeout_ms, /* see above */
-                                         void *userp);    /* private callback
-                                                             pointer */
+typedef int (CURL_FUNCC *curl_multi_timer_callback)(
+  CURLM *multi,    /* multi handle */
+  long timeout_ms, /* see above */
+  void *userp);    /* private callback
+                      pointer */
 
-CURL_EXTERN CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s,
-                                        int *running_handles);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_socket(CURLM *multi_handle,
+                                                   curl_socket_t s,
+                                                   int *running_handles);
 
-CURL_EXTERN CURLMcode curl_multi_socket_action(CURLM *multi_handle,
-                                               curl_socket_t s,
-                                               int ev_bitmask,
-                                               int *running_handles);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_socket_action(CURLM *multi_handle,
+                                                          curl_socket_t s,
+                                                          int ev_bitmask,
+                                                          int *running_handles);
 
-CURL_EXTERN CURLMcode curl_multi_socket_all(CURLM *multi_handle,
-                                            int *running_handles);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_socket_all(CURLM *multi_handle,
+                                                       int *running_handles);
 
 #ifndef CURL_ALLOW_OLD_MULTI_SOCKET
 /* This macro below was added in 7.16.3 to push users who recompile to use
@@ -341,8 +344,8 @@ CURL_EXTERN CURLMcode curl_multi_socket_all(CURLM *multi_handle,
  *
  * Returns: CURLM error code.
  */
-CURL_EXTERN CURLMcode curl_multi_timeout(CURLM *multi_handle,
-                                         long *milliseconds);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_timeout(CURLM *multi_handle,
+                                                    long *milliseconds);
 
 typedef enum {
   /* This is the socket callback function pointer */
@@ -406,8 +409,8 @@ typedef enum {
  *
  * Returns: CURLM error code.
  */
-CURL_EXTERN CURLMcode curl_multi_setopt(CURLM *multi_handle,
-                                        CURLMoption option, ...);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_setopt(CURLM *multi_handle,
+                                                   CURLMoption option, ...);
 
 
 /*
@@ -419,8 +422,9 @@ CURL_EXTERN CURLMcode curl_multi_setopt(CURLM *multi_handle,
  *
  * Returns: CURLM error code.
  */
-CURL_EXTERN CURLMcode curl_multi_assign(CURLM *multi_handle,
-                                        curl_socket_t sockfd, void *sockp);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_assign(CURLM *multi_handle,
+                                                   curl_socket_t sockfd,
+                                                   void *sockp);
 
 
 /*
@@ -438,16 +442,16 @@ CURL_EXTERN CURLMcode curl_multi_assign(CURLM *multi_handle,
 
 struct curl_pushheaders;  /* forward declaration only */
 
-CURL_EXTERN char *curl_pushheader_bynum(struct curl_pushheaders *h,
-                                        size_t num);
-CURL_EXTERN char *curl_pushheader_byname(struct curl_pushheaders *h,
-                                         const char *name);
+CURL_EXTERN char * CURL_FUNCC curl_pushheader_bynum(struct curl_pushheaders *h,
+                                                    size_t num);
+CURL_EXTERN char * CURL_FUNCC curl_pushheader_byname(struct curl_pushheaders *h,
+                                                     const char *name);
 
-typedef int (*curl_push_callback)(CURL *parent,
-                                  CURL *easy,
-                                  size_t num_headers,
-                                  struct curl_pushheaders *headers,
-                                  void *userp);
+typedef int (CURL_FUNCC *curl_push_callback)(CURL *parent,
+                                             CURL *easy,
+                                             size_t num_headers,
+                                             struct curl_pushheaders *headers,
+                                             void *userp);
 
 #ifdef __cplusplus
 } /* end of extern "C" */
-- 
2.25.1

