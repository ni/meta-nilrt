#!/bin/bash
set -e

# MODE determines the operation to be performed
# get or set
declare -r MODE="${1:-}"

NIRECOVERY_MOUNTPOINT=/mnt/NIRECOVERY

# ---------------------- Get Image ----------------------

get_device_desc () {
	local DeviceDesc=$(fw_printenv -n DeviceDesc 2>/dev/null)
	if [ -z "$DeviceDesc" ]; then
		DeviceDesc="UnknownDevice"
	fi

	echo $DeviceDesc
}

get_default_image_name () {
	local DeviceDesc=$(get_device_desc)
	local Date=$(date +%F-%H-%M-%S)

	echo $DeviceDesc-$Date
}

get_image_name () {
	local default_image_name=$(get_default_image_name)
	read -e -p "Enter image name (no spaces, no special chars except '-'): " -i "$default_image_name" image_name
	echo $image_name
}

get_ext4_features () {
	local bootfs_device=$(blkid -L nibootfs)
	echo $(debugfs -R features $bootfs_device 2>/dev/null | awk -F: '{if ($1 == "Filesystem features") print $2}' | xargs | sed 's/ /,/g')
}

ext4_has_unsupported_features () {
	e2fsck -n LABEL=nibootfs 2>&1 | grep "unsupported feature"
}

get_filesystem_attribute () {
	local label=$1
	local column=$2

	local tempdir=$(mktemp -d)

	if ! mount -L $label $tempdir &>/dev/null; then
		echo "Error mounting $label partition" >&2 && return
	fi

	available_space=$(df $tempdir | tail -1 | awk -v column="$column" '{print $column}')
	umount $tempdir
	rmdir $tempdir
	echo $available_space
}

get_used_filesystem_size () {
	get_filesystem_attribute $1 3
}

get_available_filesystem_size () {
	get_filesystem_attribute $1 4
}

get_estimated_image_size () {
	nigrub_size=$(get_used_filesystem_size "nigrub")
	nibootfs_size=$(get_used_filesystem_size "nibootfs")
	niconfig_size=$(get_used_filesystem_size "niconfig")
	nirootfs_size=$(get_used_filesystem_size "nirootfs")

	total_size=$(($nigrub_size + $nibootfs_size + $niconfig_size + $nirootfs_size))
	echo $total_size
}

is_image_valid () {
	local image_name=$1
	if [ -z "$image_name" ]; then
		echo "No image name specified. Please specify an image name" && return 1
	fi
	# If image already exists, confirm if it should be overwritten
	if [ -f $NIRECOVERY_MOUNTPOINT/Images/$image_name/systemimage.tgz ]; then
		read -e -p "An image already exits with this name. Overwrite? (y/N): " -i "N" overwrite 
		[ $overwrite != "y" ] && return 1
	fi
	return 0
}

image_get () {
	if ! mount -o remount,rw,async $NIRECOVERY_MOUNTPOINT; then
		die "Mount failure. No writable media labelled NIRECOVERY."
	fi

	if ext4_has_unsupported_features; then
		die "Unsupported filesystem features detected. Please use a newer version of recovery media."
	fi

	local nirecovery_available_space=$(get_available_filesystem_size "NIRECOVERY")
	local estimated_image_size=$(get_estimated_image_size)

	[ $estimated_image_size -eq "0" ] && die "Error estimating image size"
	[ $nirecovery_available_space -lt $estimated_image_size ] && die "Image might not fit on media. Estimated image size: $estimated_image_size. Available space on media: $nirecovery_available_space"

	local image_name=$PROVISION_SYSTEMIMAGE_NAME
	if [ -z $image_name ]; then
		image_name=$(get_image_name)
		# If no image name is provided, retry
		while ! is_image_valid $image_name; do
			image_name=$(get_image_name)
		done
	fi

	mkdir -p $NIRECOVERY_MOUNTPOINT/Images/$image_name
	echo "Getting system image $image_name. This may take a while" >&2
	local ext4_features=$(get_ext4_features)
	nisystemimage getall -d -x tgz -f $NIRECOVERY_MOUNTPOINT/Images/$image_name/systemimage.tgz

	echo "DeviceDesc=$(get_device_desc)" > $NIRECOVERY_MOUNTPOINT/Images/$image_name/systemimage.conf
	echo "Ext4Features=$ext4_features" >> $NIRECOVERY_MOUNTPOINT/Images/$image_name/systemimage.conf

	sync
	mount -o remount,ro $NIRECOVERY_MOUNTPOINT
	echo "Image $image_name saved."
}

# ---------------------- Set Image ----------------------

# Presents a list of existing compatible images and let's user select one
select_image_from_list () {
	[ ! -d $NIRECOVERY_MOUNTPOINT/Images ] && return

	images=()

	for image in $(ls $NIRECOVERY_MOUNTPOINT/Images); do
		if [ ! -f $NIRECOVERY_MOUNTPOINT/Images/$image/systemimage.tgz ] || [ ! -f $NIRECOVERY_MOUNTPOINT/Images/$image/systemimage.conf ]; then
			echo "WARNING: Image \"$image\" is missing systemimage.tgz or systemimage.conf" >&2
			continue
		fi

		local ImageDeviceDesc=$(awk -F= '{if ($1 == "DeviceDesc") print $2}' $NIRECOVERY_MOUNTPOINT/Images/$image/systemimage.conf)
		if [ "$(get_device_desc)" = "$ImageDeviceDesc" ]; then
			images+=($image)
		fi
	done

	[ -z $images ] && return
	local no_of_images=${#images[@]}

	echo "" >&2
	echo "Compatible system images found on media:" >&2

	PS3="Select an image to use for provisioning: "
	select opt in "${images[@]}"; do
		case $opt in
			*)
				if [[ "$REPLY" =~ ^[0-9]+$ ]] && [ $REPLY -gt 0 ] && [ $REPLY -le $no_of_images ]; then
					echo $opt
					break
				fi
				;;
		esac
	done
}

image_set () {
	if [[ $(type -t early_setup) != function ]]; then
		# If we're here, the script was invoked manually i.e., not from init.
		# So do the required setup.
		source /ni_provisioning.common
		early_setup
	fi

	local image_name=$PROVISION_SYSTEMIMAGE_NAME
	if [ -z $image_name ]; then
		image_name=$(select_image_from_list)
		[ -z "$image_name" ] && die "No compatible system images found on the media"
	fi

	if [[ "$PROVISION_REPARTITION_TARGET" != "y" ]]; then
		ask_for_continue "ReplicateImage" "PROVISION_REPARTITION_TARGET" "$image_name"
	fi

	if [[ $PROVISION_REPARTITION_TARGET == "y" ]]; then
		ext4_features=$(awk -F= '{if ($1 == "Ext4Features") print $2}' $NIRECOVERY_MOUNTPOINT/Images/$image_name/systemimage.conf)
		# Start with "none" so that default features are not enabled if not listed in $ext4_features
		MKFS_ARGS="${MKFS_ARGS} -O none,$ext4_features"
		source /ni_provisioning.safemode.common
		install_safemode

		echo "Applying system image $image_name. This may take a while" >&2
		nisystemimage setall -d -x tgz -f $NIRECOVERY_MOUNTPOINT/Images/$image_name/systemimage.tgz -p reset -s reset

		# Retain some grubenv settings
		if grep --quiet "^consoleoutenable=" $BOOTFS_MOUNTPOINT/grub/grubenv; then
			grubenv_consoleoutenable=$(grub-editenv $BOOTFS_MOUNTPOINT/grub/grubenv list |grep "^consoleoutenable=" | cut -f 2 -d '=')
		fi
		if grep --quiet "^bootdelay=" $BOOTFS_MOUNTPOINT/grub/grubenv; then
			grubenv_bootdelay=$(grub-editenv $BOOTFS_MOUNTPOINT/grub/grubenv list |grep "^bootdelay=" | cut -f 2 -d '=')
		fi
		rm -rf mkdir $BOOTFS_MOUNTPOINT/grub

		install_grubenv
		set_versions

		echo $LOG_LEVEL > /proc/sys/kernel/printk
		sanity_check

		print_info "Re-enabling automount..."
		enable_automount
		print_done
	fi

	trap - ERR
	exec 1>&3
	exec 2>&4
}

image_${MODE}
