From b64a69d7b4a6d8335013fb7bea16b83a8f167c7e Mon Sep 17 00:00:00 2001
From: Rajendra Desai <111044286+rajendra-desai-ni@users.noreply.github.com>
Date: Wed, 11 Sep 2024 21:07:38 +0530
Subject: [PATCH] CMakeLists: Make grpc-device buildable on NILRT 11 (#1082)

* CMakeLists: Make grpc-device buildable on NILRT 11

NILRT 11 will ship with grpc >1.60 and protobuf >v25.2.
grpc-device doesn't compile with these toolchain versions,
throwing errors about undefined symbols. Downgrading grpc
back to 1.51 (with python3-grpcio and protobuf recipes)
successfully works around these issues. But for security and
general currency reasons, we cannot afford to ship NILRT 11
with these downgrades.
Current CMakeLists.txt is limited to some of the bitbake
functionalities which makes it difficult to build with new changes.

Changes in this commit will make sure NILRT 11 compiles grpc-device
with the latest/upgraded grpc version without affecting the existing
build process.

Changes:
1. refactor toolchain link logic
   - Deprecate the CMAKE_CROSSCOMPILING variable, in favor of
     USE_SUBMODULE_LIBS cmake option. Refactor the linking logic to
     be a consolidation of all the linking actions from across the
     file, and to better support builds in generic linux environments.
2. fixup utf8cpp library link
   - The utf8cpp cmake library namespace is incorrectly identified
     as 'utf8cpp', instead of the proper 'utf8cpp:utf8cpp'. As a
     result, cmake does not link the utf8.h header and compilation
     fails.
3. parameterize python3 venv
   - Create a USE_PYTHON_VIRTUALENV cmake option. When asserted, it
     will add the bespoke venv to the toolchain. Otherwise, the
     cmake config will use the system python environment.
4. link the device server to grpc_gpr
   - ni_grpc_device_server target depends on symbols from  grpc
     gpr.so, namely gpr_log. Add grpc_gpr to link libraries for
     ni_grpc_device_server.
5. add abseil_sync dep to server target
   - ni_grpc_device_server uses symbology from libabsl_synchronization
     library. Add a library dependency to reflect that relationship.
6. add utf8cpp dep to IntegrationTestsRunner
   - The IntegrationTestsRunner depends on utf8.h header indirectly,
     via its access to the device server source.
7. fill out target lib deps
   - Shove ni_grpc_device_server library dependencies into a variable,
     so that it can be easily passed along to the test targets.
8. suppress protobuf installation in SM
   - Set protobuf_INSTALL=OFF, which suppresses the protobuf
     installation codepaths - that we don't want to use anyway and
     which cause the failure.
9. add necessary gRPC dep to ni_grpc_device_server
   - ni_grpc_device_server must be linked against libgrpc, as well as
     the grpccpp libs.
10.fixup venv codegen deps
   - Give the codegen targets a dependency on the python virtualenv
     via the all_codegen_dependencies variable.

Signed-off-by: Rajendra Desai <rajendra.desai@ni.com>

* Updated variable name of NILRT_LEGACY_TOOLCHAIN in build artifacts and fixed a small typo

Signed-off-by: Rajendra Desai <rajendra.desai@ni.com>

* build_nilrt.yml: Fixed a typo

* Enforce consistent runtime library settings in case of MSVC

Signed-off-by: Rajendra Desai <rajendra.desai@ni.com>

* Update linker condition

* Add a condition to check for POLICY CMP0091 (enabling the use of
MSVC_RUNTIME_LIBRARY property) which is supported on cmake version
>3.15 in case of MSVC compiler

Signed-off-by: Rajendra Desai <rajendra.desai@ni.com>

* CMakeLists: Code cleanup

* CMakeLists: use static runtime library

* CMakeLists: change gtest_force_shared_crt to default

* CMakeLists: add compile options if MSVC

* Workaround: Do a clean build

* Revert "CMakeLists: add compile options if MSVC"

This reverts commit 2ea12e9fbde1c969c8a57eddc375346a7f6900b5.

* Revert "CMakeLists: change gtest_force_shared_crt to default"

This reverts commit 36890c9fff9f6ccdc1ee322a100a07770c4ef1d9.

* Revert "CMakeLists: use static runtime library"

This reverts commit 26a3c63d05e64b326c18cbe778f0d14e886433ab.

* Workaround to fix Linker issues

* Remove duplicate line

* build_cmake.yml: Added a comment

* build_cmake.yml: Move comment to avoid syntax error

---------
[rajendra: Discarded upstream changes in .github/workflows/build_cmake.yml]
[rajendra: Discarded upstream changes in .github/workflows/build_nilrt.yml]

Upstream-Status: Backport [https://github.com/ni/grpc-device/commit/0d1658ea666d25a8577f348d78645b591eb45cd8]

Signed-off-by: Rajendra Desai <rajendra.desai@ni.com>
---
 CMakeLists.txt           | 188 ++++++++++++++++++++++++---------------
 cmake/nilrt-x86_64.cmake |   1 -
 2 files changed, 115 insertions(+), 74 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b0384680..3980bffb 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,62 +5,100 @@ project(ni_grpc_device_server
   VERSION 2.6.0)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
-include(CreateVirtualEnvironment)
+
 
 # Workaround for: https://bugs.chromium.org/p/boringssl/issues/detail?id=423
 if (CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64")
   set(CMAKE_SYSTEM_PROCESSOR "amd64")
 endif()
 
+# Enforce consistent runtime library settings in case of MSVC
+if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
+  if (POLICY CMP0091)
+    cmake_policy(SET CMP0091 NEW)
+    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
+    message("Setting policy CMP0091 and runtime library")
+  else()
+    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
+    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
+    message("Using dynamic runtime library")
+  endif()
+endif()
+
+#---
+# Configuration options
+#---
+option(USE_NILRT_LEGACY_TOOLCHAIN "Enable to use tools and libraries from a NILRT compile toolchain." OFF)
+option(USE_PYTHON_VIRTUALENV "Enable to use the automatically-generated python venv, local to this project source." ON)
+option(USE_SUBMODULE_LIBS "Enable to link against the submodule libraries, rather than their native-OS equivalents." ON)
+
 #----------------------------------------------------------------------
-# Use the grpc targets directly from this build, only when not cross-compiling.
+# Setup build dependencies, according to the toolchain options.
 #----------------------------------------------------------------------
-if(CMAKE_CROSSCOMPILING)
+
+if(USE_SUBMODULE_LIBS)
+  # The archetypical WIN32 build case
+  # protobuf_INSTALL must be turned OFF whenever building it as a cmake subdir.
+  set(protobuf_INSTALL OFF)
+
+  add_subdirectory(third_party/grpc ${CMAKE_CURRENT_BINARY_DIR}/grpc)
+  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
+  add_subdirectory(third_party/gtest ${CMAKE_CURRENT_BINARY_DIR}/gtest EXCLUDE_FROM_ALL)
+  add_subdirectory(third_party/json ${CMAKE_CURRENT_BINARY_DIR}/json)
+  add_subdirectory(third_party/utfcpp ${CMAKE_CURRENT_BINARY_DIR}/utfcpp)
+
+  set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
+  set(_REFLECTION grpc++_reflection)
+  set(_GRPC grpc)
+  set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:grpc_cpp_plugin>)
+  set(_GRPC_GRPCPP grpc++)
+  set(_PROTOBUF_LIBPROTOBUF libprotobuf)
+  set(_UTF8CPP utf8cpp)
+else()
   find_program(_PROTOBUF_PROTOC protoc)
   find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)
+  find_library(_GRPC_GPR gpr)
+  find_library(_ABSEIL_SYNC absl_synchronization REQUIRED)
 
-  if(NOT _GRPC_DEVICE_NILRT_LEGACY_TOOLCHAIN)
-    find_package(gRPC REQUIRED)
-    find_library(_REFLECTION grpc++_reflection)
-    find_library(_GRPC_GRPCPP grpc++)
-    find_library(_PROTOBUF_LIBPROTOBUF protobuf)
-  else()
+  if(USE_NILRT_LEGACY_TOOLCHAIN)
+    # The archetypical NILRT SDK toolchain build case
     add_subdirectory(third_party/grpc ${CMAKE_CURRENT_BINARY_DIR}/grpc EXCLUDE_FROM_ALL)
     set(_REFLECTION grpc++_reflection)
     set(_GRPC_GRPCPP grpc++)
     set(_PROTOBUF_LIBPROTOBUF libprotobuf)
-  endif()
+  else()
+    # The archetypical linux build case (including OpenEmbedded)
+    find_library(_GRPC_GRPCPP grpc++)
+    find_library(_PROTOBUF_LIBPROTOBUF protobuf)
+    find_library(_REFLECTION grpc++_reflection)
 
-else()
-  add_subdirectory(third_party/grpc ${CMAKE_CURRENT_BINARY_DIR}/grpc EXCLUDE_FROM_ALL)
-  set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
-  set(_REFLECTION grpc++_reflection)
-  set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:grpc_cpp_plugin>)
-  set(_GRPC_GRPCPP grpc++)
-  set(_PROTOBUF_LIBPROTOBUF libprotobuf)
-endif()
+    find_package(gRPC REQUIRED)
+    find_package(GTest REQUIRED)
+    find_package(nlohmann_json REQUIRED)
+    find_package(utf8cpp REQUIRED)
 
-#----------------------------------------------------------------------
-CreateVirtualEnvironment(virtual_environment
-  REQUIREMENTS_TXT
-    ${CMAKE_SOURCE_DIR}/python_build_requirements.txt
-  ENV_NAME
-    venv
-  OUT_PYTHON_EXE
-    PYTHON_EXE
-)
+    set(_GRPC gRPC::grpc)
+    set(_UTF8CPP utf8cpp::utf8cpp)
+  endif()
+endif()
 
-#----------------------------------------------------------------------
-# Use the utfcpp targets directly from this build, only when not cross-compiling.
-#----------------------------------------------------------------------
-if(CMAKE_CROSSCOMPILING AND NOT _GRPC_DEVICE_NILRT_LEGACY_TOOLCHAIN)
-  find_package(utf8cpp REQUIRED)
+# Python3 Virtual Environment
+if(USE_PYTHON_VIRTUALENV)
+  include(CreateVirtualEnvironment)
+  CreateVirtualEnvironment(virtual_environment
+    REQUIREMENTS_TXT
+      ${CMAKE_SOURCE_DIR}/python_build_requirements.txt
+    ENV_NAME
+      venv
+    OUT_PYTHON_EXE
+      PYTHON_EXE
+  )
 else()
-  add_subdirectory(third_party/utfcpp ${CMAKE_CURRENT_BINARY_DIR}/utfcpp EXCLUDE_FROM_ALL)
+  find_package(Python3 REQUIRED)
+  set(PYTHON_EXE ${Python3_EXECUTABLE})
 endif()
-include_directories(
-  "./third_party/utfcpp/source"
-)
+
+enable_testing()
 
 #----------------------------------------------------------------------
 # Use C++17 (needed for shared_mutex support on Linux)
@@ -141,6 +179,10 @@ endif()
 
 set(all_codegen_dependencies "")
 
+if(USE_PYTHON_VIRTUALENV)
+  list(APPEND all_codegen_dependencies virtual_environment)
+endif()
+
 foreach(api ${nidrivers})
   set(codegen_dependencies
     "${metadata_dir}/${api}/attributes.py"
@@ -191,7 +233,10 @@ foreach(api ${nidrivers})
       ${nidriver_client_srcs}
       "${service_output_dir}/${api}/${api}_client.cpp")
   endif()
-  set(proto_dependencies ${codegen_dependencies} ${codegen_scripts} virtual_environment)
+  set(proto_dependencies ${codegen_dependencies} ${codegen_scripts})
+  if (USE_PYTHON_VIRTUALENV)
+    list(APPEND proto_dependencies virtual_environment)
+  endif()
   add_custom_command(OUTPUT ${output_files}
     ${gen_command}
     COMMENT "Generating proto file and service for ${api}"
@@ -211,7 +256,6 @@ add_custom_command(
   DEPENDS
     ${all_codegen_dependencies}
     ${codegen_scripts}
-    virtual_environment
 )
 
 set(nidriver_service_srcs
@@ -240,6 +284,9 @@ function(GenerateGrpcSources)
   cmake_parse_arguments(GENERATE_ARGS "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
   set(output_files "${GENERATE_ARGS_OUTPUT}")
   set(proto_file "${GENERATE_ARGS_PROTO}")
+  if(USE_SUBMODULE_LIBS)
+    set(protobuf_includes_arg -I ${CMAKE_SOURCE_DIR}/third_party/grpc/third_party/protobuf/src/)
+  endif()
   get_filename_component(proto_path "${proto_file}" PATH)
   # Asssumption: all outputs are in the same directory: use the zero-th.
   list(GET output_files 0 proto_srcs)
@@ -250,7 +297,7 @@ function(GenerateGrpcSources)
     ARGS --grpc_out "${proto_out_path}"
       --cpp_out "${proto_out_path}"
       -I "${proto_path}"
-      -I ${CMAKE_SOURCE_DIR}/third_party/grpc/third_party/protobuf/src/
+      ${protobuf_includes_arg}
       -I ${CMAKE_SOURCE_DIR}/imports/protobuf
       --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
       "${proto_file}"
@@ -472,14 +519,21 @@ if(CMAKE_SYSTEM_NAME STREQUAL Windows)
     PRIVATE "source/server/windows/console_ctrl_handler.cpp")
 endif()
 
+set(server_lib_deps
+  ${_ABSEIL_SYNC}
+  ${_GRPC_GPR}
+  ${_GRPC_GRPCPP}
+  ${_GRPC}
+  ${_PROTOBUF_LIBPROTOBUF}
+  ${_REFLECTION}
+  ${_UTF8CPP}
+  ${CMAKE_DL_LIBS}
+  nlohmann_json::nlohmann_json
+)
+
 target_link_libraries(ni_grpc_device_server
-   ${_REFLECTION}
-   ${_GRPC_GRPCPP}
-   ${_PROTOBUF_LIBPROTOBUF}
-   ${CMAKE_DL_LIBS}
-   nlohmann_json::nlohmann_json
-   utf8cpp
-   )
+  ${server_lib_deps}
+)
 
 set_target_properties(ni_grpc_device_server PROPERTIES BUILD_WITH_INSTALL_RPATH TRUE)
 
@@ -500,20 +554,6 @@ add_custom_command(
    COMMAND  ${PYTHON_EXE} ${codegen_dir}/generate_server_capabilities.py ${metadata_dir}/
             -o $<TARGET_FILE_DIR:ni_grpc_device_server>/)
 
-
-#----------------------------------------------------------------------
-# Add JSON parser and configure google tests
-#----------------------------------------------------------------------
-if(CMAKE_CROSSCOMPILING AND NOT _GRPC_DEVICE_NILRT_LEGACY_TOOLCHAIN)
-  find_package(nlohmann_json REQUIRED)
-  find_package(GTest REQUIRED)
-else()
-  add_subdirectory(third_party/json ${CMAKE_CURRENT_BINARY_DIR}/json EXCLUDE_FROM_ALL)
-  enable_testing()
-  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-  add_subdirectory(third_party/gtest ${CMAKE_CURRENT_BINARY_DIR}/gtest EXCLUDE_FROM_ALL)
-endif()
-
 # Link test executable against gtest
 add_executable(IntegrationTestsRunner
     "imports/include/nierr_Status.cpp"
@@ -568,12 +608,12 @@ add_executable(IntegrationTestsRunner
     find_package(Threads REQUIRED)
 
 target_link_libraries(IntegrationTestsRunner
-    gtest
+    ${server_lib_deps}
     gmock
-    ${_GRPC_GRPCPP}
-    ${CMAKE_DL_LIBS}
+    grpc
+    gtest
     Threads::Threads
-    nlohmann_json::nlohmann_json)
+)
 
 # Ignore the use of deprecated functions in test code
 target_compile_definitions(IntegrationTestsRunner
@@ -673,12 +713,13 @@ target_include_directories(UnitTestsRunner
     PRIVATE "source/server")
 
 target_link_libraries(UnitTestsRunner
-    gtest
-    gmock
-    ${_GRPC_GRPCPP}
     ${CMAKE_DL_LIBS}
+    ${server_lib_deps}
+    gmock
+    grpc
+    gtest
     Threads::Threads
-    nlohmann_json::nlohmann_json)
+)
 
 #----------------------------------------------------------------------
 # Copy test asset certificates to binary output certs sub-directory
@@ -695,8 +736,10 @@ foreach(api ${nidrivers_to_build})
     "${service_output_dir}/${api}/${api}_compilation_test.cpp")
 endforeach()
 add_library(CompilationTests STATIC ${compilation_test_sources})
+
 target_link_libraries(CompilationTests
     ${_GRPC_GRPCPP}
+    ${_UTF8CPP}
 )
 add_custom_target(generated_nidriver_service_library_hdrs DEPENDS ${nidriver_service_library_hdrs})
 add_dependencies(CompilationTests generated_nidriver_service_library_hdrs)
@@ -802,11 +845,10 @@ endif()
 add_executable(SystemTestsRunner ${system_test_runner_sources})
 
 target_link_libraries(SystemTestsRunner
-    gtest
-    gmock
-    ${_GRPC_GRPCPP}
     ${CMAKE_DL_LIBS}
-    nlohmann_json::nlohmann_json
+    ${server_lib_deps}
+    gmock
+    gtest
 )
 
 # Ignore the use of deprecated functions in test code
@@ -819,7 +861,7 @@ add_custom_command(
             ${CMAKE_SOURCE_DIR}/source/tests/assets/data/
             $<TARGET_FILE_DIR:SystemTestsRunner>/)
 
-if(_GRPC_DEVICE_NILRT_LEGACY_TOOLCHAIN)
+if(USE_NILRT_LEGACY_TOOLCHAIN)
     target_link_libraries(SystemTestsRunner stdc++fs)
     target_compile_definitions(SystemTestsRunner PRIVATE FS_EXPERIMENTAL)
 endif()
diff --git a/cmake/nilrt-x86_64.cmake b/cmake/nilrt-x86_64.cmake
index c007f696..7f00969f 100644
--- a/cmake/nilrt-x86_64.cmake
+++ b/cmake/nilrt-x86_64.cmake
@@ -3,7 +3,6 @@
 #----------------------------------------------------------------------
 set(CMAKE_SYSTEM_NAME Linux)
 set(CMAKE_SYSTEM_PROCESSOR x86_64)
-set(_GRPC_DEVICE_NILRT_LEGACY_TOOLCHAIN TRUE)
 
 #----------------------------------------------------------------------
 # Path variables for toolchains
-- 
2.34.1

