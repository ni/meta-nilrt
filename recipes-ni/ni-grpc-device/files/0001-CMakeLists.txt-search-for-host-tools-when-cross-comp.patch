From 000ad8b584f0db5c8a7e15944a39ec3bb3be0d81 Mon Sep 17 00:00:00 2001
From: Alex Stewart <alex.stewart@ni.com>
Date: Tue, 27 Apr 2021 09:56:09 +0000
Subject: [PATCH] CMakeLists.txt: search for host tools when cross-compiling

The current toolchain configuration assumes too-strongly that the
builder always wants to use grpc and libprotobuf from the project
submodules. In cross-compilation cases (like when building in OE), we
want to use the host-native tools where possible.

When cross-compiling, prefer to find_*() programs and libraries, rather
than sourcing them from the submodules.

Signed-off-by: Alex Stewart <alex.stewart@ni.com>

---
 CMakeLists.txt | 32 +++++++++++++++++---------------
 1 file changed, 17 insertions(+), 15 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f186424..14bac57 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,25 +3,22 @@ cmake_minimum_required(VERSION 3.12.0)
 project(ni_grpc_device_server C CXX)
 
 #----------------------------------------------------------------------
-# Include the gRPC's cmake build
+# Use the grpc targets directly from this build, only when not cross-compiling.
 #----------------------------------------------------------------------
-add_subdirectory(third_party/grpc ${CMAKE_CURRENT_BINARY_DIR}/grpc EXCLUDE_FROM_ALL)
-
-#----------------------------------------------------------------------
-# Use the grpc targets directly from this build.
-#----------------------------------------------------------------------
-set(_PROTOBUF_LIBPROTOBUF libprotobuf)
-set(_REFLECTION grpc++_reflection)
 if(CMAKE_CROSSCOMPILING)
+  find_package(gRPC REQUIRED)
   find_program(_PROTOBUF_PROTOC protoc)
-else()
-  set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
-endif()
-set(_GRPC_GRPCPP grpc++)
-if(CMAKE_CROSSCOMPILING)
   find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)
+  find_library(_REFLECTION grpc++_reflection)
+  find_library(_GRPC_GRPCPP grpc++)
+  find_library(_PROTOBUF_LIBPROTOBUF protobuf)
 else()
+  add_subdirectory(third_party/grpc ${CMAKE_CURRENT_BINARY_DIR}/grpc EXCLUDE_FROM_ALL)
+  set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
+  set(_REFLECTION grpc++_reflection)
   set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:grpc_cpp_plugin>)
+  set(_GRPC_GRPCPP grpc++)
+  set(_PROTOBUF_LIBPROTOBUF libprotobuf)
 endif()
 
 #----------------------------------------------------------------------
@@ -208,12 +205,17 @@ add_custom_command(
 #----------------------------------------------------------------------
 # Add JSON parser
 #----------------------------------------------------------------------
-add_subdirectory(third_party/json ${CMAKE_CURRENT_BINARY_DIR}/json EXCLUDE_FROM_ALL)
+if(CMAKE_CROSSCOMPILING)
+  find_package(nlohmann_json REQUIRED)
+  find_library(gtest REQUIRED)
+else()
+  add_subdirectory(third_party/json ${CMAKE_CURRENT_BINARY_DIR}/json EXCLUDE_FROM_ALL)
+  add_subdirectory(third_party/gtest ${CMAKE_CURRENT_BINARY_DIR}/gtest EXCLUDE_FROM_ALL)
+endif()
 
 # Add googletest tests
 enable_testing()
 set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-add_subdirectory(third_party/gtest ${CMAKE_CURRENT_BINARY_DIR}/gtest EXCLUDE_FROM_ALL)
 
 # Link test executable against gtest
 add_executable(IntegrationTestsRunner
