arch=`uname -m`

# Newer grub.cfg may look for the existence of a boot mode file
#  under BOOTFLAGS_DIR instead of BOOT_CONFIG_LOCATION
#  when enable_initramfs is set.
NI_GRUB_ENABLE_BOOTFLAGS_DIR="`/sbin/fw_printenv enable_initramfs 2>/dev/null | cut -d'=' -f2`" || true
[ -n "$NI_GRUB_ENABLE_BOOTFLAGS_DIR" ] || NI_GRUB_ENABLE_BOOTFLAGS_DIR=0

if [ "$NI_GRUB_ENABLE_BOOTFLAGS_DIR" -ge 1 ]; then
   BOOTFLAGS_DIR="/boot/bootflags.d"

   write_config() {
      if [ "$1" == safemode ]; then
         echo -n "" >"$BOOTFLAGS_DIR/safemode"
         rm -f "$BOOTFLAGS_DIR/runtime"
      else
         echo -n "" >"$BOOTFLAGS_DIR/runtime"
         rm -f "$BOOTFLAGS_DIR/safemode"
      fi
   }

   read_config() {
      if [ -f "$BOOTFLAGS_DIR/safemode" ]; then
         echo "safemode"
      else
         echo "runtime"
      fi
   }

   # set default on first run of this script
   if [ ! -f "$BOOTFLAGS_DIR/safemode" ] && [ ! -f "$BOOTFLAGS_DIR/runtime" ]; then
      if [ -f "/etc/natinst/safemode" ]; then
         write_config safemode
      else
         write_config runtime
      fi
   fi
else
   BOOT_CONFIG_LOCATION="/boot/bootmode"

   write_config() {
      echo "set BOOT_MODE=$1" > $BOOT_CONFIG_LOCATION
   }

   read_config() {
      read tmp_cfg < $BOOT_CONFIG_LOCATION
      echo $tmp_cfg | awk -F '=' '{print $2}';
   }

   # if the bootmode file doesn't exist, this is the first run of this
   # script for this boot, so set it to the current mode
   if [ ! -f "$BOOT_CONFIG_LOCATION" ]; then
      if [ -f "/etc/natinst/safemode" ]; then
         write_config safemode
      else
         write_config runtime
      fi
   fi
fi

BOOT_MODE_INPUT=/tmp/ni_boot_mode_input
SAFEMODE_REASON_FILE=/etc/natinst/share/safemode_reason

fail() { echo "$@" >&2; exit 1; }

setbootmode() {
	case "$1" in
	runtime)
		write_config runtime
		;;
	install)
		echo "Install Mode" > $SAFEMODE_REASON_FILE
		write_config safemode
		;;
	safemode)
		# SAFEMODE_REASON_FILE is set below when the user calls
		# force-safemode, because that's where we have access
		# to the reason string.
		write_config safemode
		;;
	esac
}

checkbootmode() {
	[ -f $BOOT_MODE_INPUT ] || return

	read NEXT_BOOT_MODE < $BOOT_MODE_INPUT
	if [ -n "$NEXT_BOOT_MODE" ]; then
		case "$NEXT_BOOT_MODE" in
		runtime|install|safemode)
			CUR_BOOT_CONFIG=$(read_config)
			if [ "$NEXT_BOOT_MODE" != "$CUR_BOOT_CONFIG" ]; then
				echo Configuring next boot mode to $NEXT_BOOT_MODE.
				setbootmode $NEXT_BOOT_MODE
			else
				# The current boot mode and the requested boot mode are
				# the same. Ignoring the request.  However, this is not
				# a warning or a fatal error just an optimization.
				echo "Next boot mode is $NEXT_BOOT_MODE"
			fi
			;;
		recovery)
			fail "Entering recovery mode requires physical access."
			;;
		*)
			fail "Fatal error: The file $BOOT_MODE_INPUT contains invalid boot mode"
			;;
		esac
	fi
}
