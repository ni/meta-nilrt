#!/bin/bash

. /usr/share/nisysinfo/smbios_helper
. /usr/share/nisysinfo/efi_helper

# Read config file /etc/lsb-release if it exists
[ -r /etc/lsb-release ] && . /etc/lsb-release

print_help(){
cat <<EOF
fw_printenv/fw_setenv, an implementation of the U-Boot environment variable facility in Grub/EFI
usage:  fw_printenv [-n] [variable name]
	fw_setenv [variable name] [variable value]
	fw_setenv -s [ file ]
	fw_setenv -s - < [ file ]

File syntax example:
	# Any line starting with # is treated as comment
	var1
	var2          string value
	other_value   1234

In this case, var1 will be deleted, var2 and other_value
will be set with the values passed. The value can contain any
number of spaces.
EOF
}

#show_variable functions will print all variables from specific environment if no input, or
#they will write the value of the "$1" variable name

show_variable_grub(){
	if [ $# -eq 0 ] ; then
		#show all variables
		grub-editenv list
		if [ $? -ne 0 ]; then
			return 1
		fi
		return 0
	else
		set -o pipefail
		value=$(grub-editenv - list | grep -- "$1=" | while read -r line; do
			key=$(echo "$line" | cut -d "=" -f 1)
			#if the $1 matches exactly the key, extract the value
			if [ "$key" = "$1" ] ; then
				value_tmp=$(echo "$line" | cut -d "=" -f 2-)
				echo "$value_tmp"
				break
			fi
		done)
		if [ $? -ne 0 ]; then
			return 1
		fi
		if [[ $value ]]; then
			return 0
		fi
		return 1
	fi
}

readonly_grub_variable()
{
	grub_readonly_vars_file=/boot/.safe/GRUB_NI_readonly_vars
	if [ ! -f  $grub_readonly_vars_file ]; then
		#GRUB_NI read-only vars file does not exist
		return 1
	fi
	grep -sw "$1" "$grub_readonly_vars_file"
	return $?
}

declare -A smbios_funcs=(
["DeviceCode"]=get_target_id
["DeviceDesc"]=get_target_name
["TargetClass"]=get_target_class
["serial#"]=get_serial_number)

if [[ "$DISTRIB_ID" == "nilrt-nxg" ]] ; then
	# nilrt-nxg distributions expect to have the full DeviceDesc while
	# other distributions expect to have leading "NI " removed.
	smbios_funcs["DeviceDesc"]=get_NI_target_name
fi

show_variable_smbios(){
	# We show all variables when no args passed
	if [ $# -eq 0 ]; then
		if is_ni_bios || is_ni_device; then
			for var in ${!smbios_funcs[@]}; do
				echo ${var}=`${smbios_funcs[${var}]}`
			done
		fi
		# else, return nothing and exit successfully
		return 0
	fi
	# Otherwise, return the value that was requested only on NI targets
	if is_ni_bios || is_ni_device; then
		if [ "${smbios_funcs[$1]}" ]; then
			value=`${smbios_funcs[$1]}`
			return $?
		fi
	fi
	return 1
}

declare -A efi_funcs=(
["BootFirmwareConsoleOutEnable"]=get_set_console_out
["IsNILinuxRTBoot"]=get_set_nilrt_boot)

show_variable_efi(){
	# We show all variables when no args passed
	if [ $# -eq 0 ]; then
		for var in ${!efi_funcs[@]}; do
			local key=${var}
			local val=`${efi_funcs[${var}]}`

			if [ -n "$val" ]; then
				echo $key=$val
			fi
		done
		# else, return nothing and exit successfully
		return 0
	fi
	# Otherwise, return the value that was requested only on NI targets
	if [ "${efi_funcs[$1]}" ]; then
		${efi_funcs[$1]} >/dev/null
		return $?
	fi
	return 1
}

#wraps together smbios, efi and grub variable query
show_variable(){
	if [ $# -eq 0 ]; then
		#show all variables
		show_variable_smbios && show_variable_efi && show_variable_grub
		return $?
	else
		value=""
		#check for single variable
		if show_variable_smbios $1 || show_variable_efi $1 || show_variable_grub $1; then
			(( n_opt )) || printf '%s=' "$var_name"
			printf '%s\n' "$value"
			return 0
		else
			echo "## Error: \"$var_name\" not defined " >&2
			exit 1
		fi
	fi
}

add_rem_vars(){
	value=""

	#SMBIOS - are read only variables
	if is_ni_bios || is_ni_device; then
		if show_variable_smbios "$var_name"; then
			echo "Can't overwrite" "\"$var_name\"" >&2
			exit 1
		fi
	fi

	#EFI
	if [ "${efi_funcs[$var_name]}" ]; then
		if [ -n "$new_value" ]; then
			${efi_funcs[$var_name]} $new_value
			return
		else
			echo "Can't delete" "\"$var_name\"" >&2
			exit 1
		fi
	fi

	#Grub
	if readonly_grub_variable "$var_name"; then
		echo "Can't overwrite" "\"$var_name\"" >&2
		exit 1
	fi
	if [[ $new_value ]]; then
		grub-editenv - set "$var_name=$new_value"
	else
		grub-editenv - unset "$var_name"
	fi
}

read_vars_from_file(){
	if [[ $s_file == "-" ]]; then
		exec {fd_file}>&0
	else
		if [ -f $s_file ]; then
			#not valid file
			echo "I cannot open $file for reading" >&2
			exit 1
		fi
		exec {fd_file}>"$s_file"
	fi
	while read -r line;
	do
		var_name=$(echo "$line" | awk -F " " '{print $1}')
		new_value=$(echo "$line" | awk -F " " '{$1=""; print substr($0, 2)}')
		add_rem_vars
	done <&$fd_file
	exec {fd_file}<&-
}

print_invalid_opt(){
	echo "$0:  invalid option -- '$1'"
	echo "Try '$0 --help' for more information"
	exit 1
}

parse_opt(){
	while getopts ":hn:s:-:" opt;
	do
		case "${opt}" in

			-)	#check for long options
				if [ "${OPTARG}" == "help" ]; then
					#print help and exit
					print_help >&2
					exit
				else
					print_invalid_opt ${OPTARG} >&2
				fi
				;;
			h)	#print help and exit
				print_help >&2
				exit
				;;
			s)	s_opt=1; s_file=$OPTARG ;;
			n)	n_opt=1; varnames=$OPTARG ;;
			*)	print_invalid_opt $OPTARG >&2
				;;
		esac
	done

	#check if there are other options passed incorrectly
	shift $(($OPTIND - 1))
	if [ "x$(echo $* | grep ' \-')" != "x" ]; then
		echo "$0:  invalid syntax" >&2
		echo "Try '$0 --help' for more information"
		exit 1
	fi

	if (( ! is_setenv && s_opt )); then
		print_invalid_opt "s" >&2
		exit 1
	fi

	if (( is_setenv && n_opt )); then
		print_invalid_opt "n" >&2
		exit 1
	fi

	if (( n_opt && $# )); then
		echo "## Error: '-n' option requires exactly one argument" >&2
		exit 1
	fi
}

if [[ $0 =~ fw_setenv ]]; then
	is_setenv=1
fi

#if grub folder does not exist, create it
if [ ! -d "/boot/grub" ] ; then
	mkdir -p /boot/grub
fi

#init values for parsing
s_opt=0
s_file=""
n_opt=0
varnames=$@

#parse opt for both printenv and setenv
parse_opt $@

if (( ! is_setenv )) ; then
	if [ $# -eq 0 ] ; then # if no arguments, list the variables
		show_variable || exit $?
	else
		#show all variables passed by name
		for var_name in $varnames
		do
			show_variable "$var_name"
		done
	fi
else
	if [ $s_opt -eq 1 ]; then
		read_vars_from_file $s_file
		exit
	fi
	var_name=$(echo "$@" | awk -F " " '{print $1}')
	new_value=$(echo "$@" | awk -F " " '{$1=""; print substr($0, 2)}')
	add_rem_vars
fi
