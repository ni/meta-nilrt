#!/bin/bash
set -eu

readonly SCRIPT_NAME="nilrt-install"
readonly SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")

function info() {
    echo "$SCRIPT_NAME: $*" || true
}

function cleanup() {
    local exitCode="$?"

    set +e

    # detach loopback device
    if [ -n "${LOOPDEV:-}" ] ; then
        losetup -d "$LOOPDEV"
    fi

    if [ -e "${GRUB_MOUNT:-}" ]; then
        umount "$GRUB_MOUNT"
        rmdir "$GRUB_MOUNT"
    fi

    # Restore boot partitions to previous states
    [ -n "${EFI_MOUNT_A-}" ] && mount -o remount,ro "$EFI_MOUNT_A" &>/dev/null
    [ -n "${EFI_MOUNT_B-}" ] && umount "$EFI_MOUNT_B" &>/dev/null
    [ -n "${NIPAYLOAD_MOUNT-}" ] && umount "$NIPAYLOAD_MOUNT" &>/dev/null

    exit "$exitCode"
}

trap cleanup EXIT

function die() {
    echo "Error: $1"
    exit 1
}

# Mount the ISO/wic file as a loopback device
info "Mounting the ISO"
if [ -f "$SCRIPT_DIR/restore-mode-image-x64.iso" ] ; then
    # grub->efi-ab migration
    EXTERNAL_PAYLOAD="dist-nilrt-efi-ab"
    losetup -f "$SCRIPT_DIR/restore-mode-image-x64.iso" -P -r
    LOOPDEV=$(losetup -j "$SCRIPT_DIR/restore-mode-image-x64.iso" |cut -f 1 -d:)
else
    # efi-ab->grub migration
    losetup -f "$SCRIPT_DIR/safemode-restore-image-x64.iso" -P -r
    LOOPDEV=$(losetup -j "$SCRIPT_DIR/safemode-restore-image-x64.iso" |cut -f 1 -d:)
fi

if [ -n "${EXTERNAL_PAYLOAD:-}" ] ; then
    # Download ipk into /payload of nirootfs or niuser partition
    NIPAYLOAD_MOUNT=$(mktemp -d "/var/volatile/nipayload-XXXXXXX")
    PAYLOAD_LABEL=$(lsblk -lnpo NAME,LABEL |egrep -o "niuser|nirootfs")
    mount -L $PAYLOAD_LABEL $NIPAYLOAD_MOUNT || die "Unable to mount nirootfs."

    info "Downloading external payload ${EXTERNAL_PAYLOAD} to ${PAYLOAD_LABEL}"
    rm -rf $NIPAYLOAD_MOUNT/payload
    mkdir $NIPAYLOAD_MOUNT/payload || die "Unable to create payload directory."

    pushd $NIPAYLOAD_MOUNT/payload > /dev/null
    opkg update > /dev/null
    opkg download $EXTERNAL_PAYLOAD > /dev/null || (popd > /dev/null; die "Unable to download ${EXTERNAL_PAYLOAD}.  Check if disk has sufficient space.")
    test -e "${EXTERNAL_PAYLOAD}*.ipk" || (popd > /dev/null; die "Unable to download ${EXTERNAL_PAYLOAD}. Check if feeds contain ${EXTERNAL_PAYLOAD} package.")
    popd > /dev/null
fi

# Identify the 2 partitions in the ISO/wic file
info "Locating ISO source partitions"
efipart=$(lsblk -lnpo NAME,LABEL "$LOOPDEV"p? |egrep 'NIRECOVERY$' |cut -d" " -f 1)
isopart=$(lsblk -lnpo NAME,LABEL "$LOOPDEV"p? |grep NIRECOVERY-HD |cut -d" " -f 1)

# Locate target partitions by filesystem labels
info "Locating destination partitions"
TARGET_EFI=$(lsblk -lnpo NAME,LABEL |grep "nigrub" |cut -d" " -f 1)
TARGET_OTHER=$(lsblk -lnpo NAME,LABEL |grep "nibootfs" |cut -d" " -f 1)

# If nigrub and nibootfs were not found, then use niboot.current and niboot.other
[ -z "$TARGET_EFI" ] && TARGET_EFI=/dev/niboot/niboot.current
[ -z "$TARGET_OTHER" ] && TARGET_OTHER=/dev/niboot/niboot.other

# Verify partitions are all found
[ -z "$efipart" ] && die "Unable to locate NIRECOVERY partition."
[ -z "$isopart" ] && die "Unable to locate NIRECOVERY-HD partition."
[ ! -e "$TARGET_EFI" ] && die "Unable to locate efi partition."
[ ! -e "$TARGET_OTHER" ] && die "Unable to locate secondary partition."

# Verify the grub.cfg file looks like what this script expects before
# destructively modifying the partitions.
readonly GRUB_MOUNT=$(mktemp -d "/var/volatile/grub-XXXXXXX")
mount -r "$efipart" "$GRUB_MOUNT"
grep -q "restore=provision-safe" "$GRUB_MOUNT/EFI/BOOT/grub.cfg" || \
    grep -q "restore=provision" "$GRUB_MOUNT/EFI/BOOT/grub.cfg" || \
    die "Unable to set auto provisioning mode"

if [ "$TARGET_EFI" == "/dev/niboot/niboot.current" ] ; then
    # Remount EFI partition as read/write
    EFI_MOUNT_A="/boot"
    EFI_MOUNT="$EFI_MOUNT_A"
    mount -o remount,rw "$TARGET_EFI" "$EFI_MOUNT" || die "Unable to mount EFI partition as read/write"
else
    EFI_MOUNT_B=$(mktemp -d "/var/volatile/nigrub-XXXXXXX")
    EFI_MOUNT="$EFI_MOUNT_B"
    mount "$TARGET_EFI" "$EFI_MOUNT" || die "Unable to mount EFI partition"
fi

# -------- Point of no return ---------
# The target's partitions are being modified for provisioning

# copy EFI image to EFI boot partition
info "Rewriting EFI partition"
find "$EFI_MOUNT" -mindepth 1 -maxdepth 1 -exec rm -fr {} \;
cp -R "$GRUB_MOUNT"/* "$EFI_MOUNT"

# Modify grub.cfg to signify that this is an onboard provisioning operation
info "Preparing EFI partition for automatic provisioning"
sed "s/restore=provision-safe/restore=backward-migrate/" -i "$EFI_MOUNT/EFI/BOOT/grub.cfg"
sed "s/restore=provision/restore=migrate/" -i "$EFI_MOUNT/EFI/BOOT/grub.cfg"

# copy payload/ISO contents to other partition
info "Rewriting secondary partition"
# unmount target partition even if its mounted at multiple mount points
mount_cnt=$(findmnt --list "$TARGET_OTHER" |wc -l)
for ((i=1;i<$mount_cnt;i++)) ; do
    umount --read-only "$TARGET_OTHER" 2>/dev/null
done
dd if="$isopart" of="$TARGET_OTHER" >/dev/null 2>&1

info "Install successful."
