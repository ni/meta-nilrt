#!/bin/bash
set -euo pipefail
readonly SCRIPT_NAME="rauc-mark-good"

# Finalizes first boot into a new NILRT partition
#  * Migrates old system configuration if present
#  * Marks the current boot good
#  * Cleanups up old system overlay if present
#  * Removes itself from subsequent boots

# close stdin
exec 0<&-

# suppress stdout and stderr if echo fails, so that subsequent
#  tools dont error out when prints occur
if ! echo -n " "; then
    exec 1>/dev/null
fi
if ! echo -n " " 1>&2; then
    exec 2>&1
fi

# prints to kernel log and screen
function error () {
    echo "$SCRIPT_NAME: ERROR: $*" > /dev/kmsg || true
    echo "$SCRIPT_NAME: ERROR: $*" || true
    false
}

function info () {
    echo "$SCRIPT_NAME: $*" > /dev/kmsg || true
    echo "$SCRIPT_NAME: $*" || true
}

# usb_boot - determine if the system has booted from a USB device
# and appears to be a one time boot.
#
# 1) Device must be removable (or its not a USB)
# 2) More than one niboota or nibootb exists (one of which is
#    presumed to be on internal storage)
#
function usb_boot () {
    # Check for 2 (or more) niboota or nibootb labeled partitions
    [ $(lsblk -lno NAME,PARTLABEL |grep niboota |wc -l) -gt 1 ] || return 1
    [ $(lsblk -lno NAME,PARTLABEL |grep nibootb |wc -l) -gt 1 ] || return 1

    # is the device removable
    devname=$(mount |grep boot |cut -d" " -f1)
    devname=${devname#/dev/}
    devname=${devname%[[:digit:]]*}

    [ $(</sys/block/$devname/removable) != 0 ]
}

if [ "${1:-}" != "start" ]; then
    error "This boot script can only run with 'start' parameter"
fi

readonly FIRST_BOOT_MARKER="/var/lib/rauc/first-boot.done"
if [ -e "$FIRST_BOOT_MARKER" ]; then
    readonly FIRST_BOOT=false
else
    readonly FIRST_BOOT=true
fi

if efibootmgr | egrep -q '^Boot.* niboot(a|b)( |$)'; then
    readonly HAS_NIBOOT_EFI=true
else
    readonly HAS_NIBOOT_EFI=false
fi

function cleanup() {
    local exitCode="$?"

    set +e

    if [ -e "${OTHER_TMP_MOUNT:-}" ]; then
        umount "$OTHER_TMP_MOUNT"
        rmdir "$OTHER_TMP_MOUNT"
    fi

    if [ -e "${NIUSER_TMP_MOUNT:-}" ]; then
        umount "$NIUSER_TMP_MOUNT"
        rmdir "$NIUSER_TMP_MOUNT"
    fi

    if $FIRST_BOOT; then
        # Add first-boot marker file
        echo -n > "$FIRST_BOOT_MARKER"
        chmod 0444 "$FIRST_BOOT_MARKER"
        sync
    fi

    if [ "$exitCode" != "0" ]; then
        error "exitCode=$exitCode, FIRST_BOOT=$FIRST_BOOT, HAS_NIBOOT_EFI=$HAS_NIBOOT_EFI"

        # Reboot only if running A/B capable EFI
        if $FIRST_BOOT && $HAS_NIBOOT_EFI; then
            error "Rebooting due to error on first boot"
            reboot
        fi
    fi

    exit "$exitCode"
}

trap cleanup EXIT

# Migrate transconf config on first boot only
if $FIRST_BOOT; then
    readonly NIUSER_TMP_MOUNT=$(mktemp -d "/var/volatile/niuser-mnt-XXXXXXX")
    chmod 0700 "$NIUSER_TMP_MOUNT"
    mount -o rw,sync,relatime /dev/niboot/niuser "$NIUSER_TMP_MOUNT"

    readonly OLD_OVERLAY="$NIUSER_TMP_MOUNT/overlay.old"
    readonly TC_IMAGE="etc/niboot/system-config-image.tgz"

    if [ -e "$OLD_OVERLAY/upper/$TC_IMAGE" ]; then
        if transconf restore "$OLD_OVERLAY/upper/$TC_IMAGE"; then
            mv "$OLD_OVERLAY/upper/$TC_IMAGE" "/$TC_IMAGE.restored"
            chown 0:0  "/$TC_IMAGE.restored"
            chmod 0400 "/$TC_IMAGE.restored"

            sync

            info "Restored old system config via transconf"
        else
            error "Failed to restore $OLD_OVERLAY/upper/$TC_IMAGE"
        fi
    fi
fi

# Mark the current boot good
# Suppress errors when running on non-A/B capable firmware/boot loader
# Skip call to mark-good if this boot a one-time USB boot
if ! usb_boot; then
    if $HAS_NIBOOT_EFI; then
        rauc status mark-good >/dev/null
    else
        rauc status mark-good >/dev/null || true
    fi
    info "Marked current boot good"
else
    info "USB boot detected; skipping call to RAUC mark-good to avoid updating the boot sequence"
fi

if $FIRST_BOOT; then
    # Delete old overlay to reclaim disk
    rm -Rf "$OLD_OVERLAY"
fi

# After marking the current partition as good, copy it to the other boot partition as a backup
readonly BACKUP_MARKER="/var/lib/rauc/backup.done"
if [ ! -e "$BACKUP_MARKER" ]; then
    info "Creating boot partition backup in /dev/niboot/niboot.other partition"
    readonly OTHER_TMP_MOUNT=$(mktemp -d "/var/volatile/other-mnt-XXXXXXX")
    mkfs.vfat -n "$(readlink /dev/niboot/niboot.other)" /dev/niboot/niboot.other
    mount /dev/niboot/niboot.other "$OTHER_TMP_MOUNT"
    rm -fr "$OTHER_TMP_MOUNT/*"
    cp -R /boot/* "$OTHER_TMP_MOUNT"
    rm -fr "$OTHER_TMP_MOUNT/slot.raucs"
    echo -n > "$BACKUP_MARKER"
    chmod 0444 "$BACKUP_MARKER"
    sync
fi
