From 886a20ad1e7b5891f7e5f9464db8ea3f9e4603cf Mon Sep 17 00:00:00 2001
From: Haris Okanovic <haris.okanovic@ni.com>
Date: Mon, 1 Oct 2018 12:20:50 -0500
Subject: [PATCH] pi-condvars: EAGAIN retry in pthread_cond_ broadcast() and
 signal()

PI implementations of pthread_cond_broadcast() and pthread_cond_signal()
invoke FUTEX_CMP_REQUEUE_PI to signal waiters, but fail to handle EAGAIN
return code from Linux:

https://elixir.bootlin.com/linux/v4.9.47/source/kernel/futex.c#L3241
https://elixir.bootlin.com/linux/v4.9.47/source/kernel/futex.c#L1788

Adds retry loop when lll_futex_cmp_requeue_pi() returns EAGAIN.

Signed-off-by: Haris Okanovic <haris.okanovic@ni.com>
[gratian: update the futex value when retrying EAGAIN on broadcast]
Signed-off-by: Gratian Crisan <gratian.crisan@ni.com>
---
 nptl/pthread_cond_broadcast.c | 19 +++++++++++++++----
 nptl/pthread_cond_signal.c    | 35 +++++++++++++++++++++--------------
 2 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/nptl/pthread_cond_broadcast.c b/nptl/pthread_cond_broadcast.c
index 0bf22fc..7c0a852 100644
--- a/nptl/pthread_cond_broadcast.c
+++ b/nptl/pthread_cond_broadcast.c
@@ -42,10 +42,11 @@ __pthread_cond_broadcast (pthread_cond_t *cond)
   /* Are there any waiters to be woken?  */
   if (cond->__data.__total_seq > cond->__data.__wakeup_seq)
     {
+again:
       /* Yes.  Mark them all as woken.  */
       cond->__data.__wakeup_seq = cond->__data.__total_seq;
       cond->__data.__woken_seq = cond->__data.__total_seq;
-      cond->__data.__futex = (unsigned int) cond->__data.__total_seq * 2;
+      ++cond->__data.__futex;
       int futex_val = cond->__data.__futex;
       /* Signal that a broadcast happened.  */
       ++cond->__data.__broadcast_seq;
@@ -65,10 +66,20 @@ __pthread_cond_broadcast (pthread_cond_t *cond)
      && defined __ASSUME_REQUEUE_PI)
       if (USE_REQUEUE_PI (mut))
 	{
-	  if (lll_futex_cmp_requeue_pi (&cond->__data.__futex, 1, INT_MAX,
-					&mut->__data.__lock, futex_val,
-					LLL_PRIVATE) == 0)
+	  long int futex_err;
+
+	  futex_err = lll_futex_cmp_requeue_pi (&cond->__data.__futex, 1, INT_MAX,
+						&mut->__data.__lock, futex_val,
+						LLL_PRIVATE);
+
+	  if (__glibc_likely (futex_err == 0))
 	    return 0;
+
+	  if (__glibc_unlikely (futex_err == -EAGAIN))
+            {
+	      cond_lock (cond, pshared);
+	      goto again;
+	    }
 	}
       else
 #endif
diff --git a/nptl/pthread_cond_signal.c b/nptl/pthread_cond_signal.c
index 0ab2a7ce9a..4f95aaf371 100644
--- a/nptl/pthread_cond_signal.c
+++ b/nptl/pthread_cond_signal.c
@@ -43,6 +43,8 @@ __pthread_cond_signal (pthread_cond_t *cond)
   /* Are there any waiters to be woken?  */
   if (cond->__data.__total_seq > cond->__data.__wakeup_seq)
     {
+      long int futex_err = -1;
+
       /* Yes.  Mark one of them as woken.  */
       ++cond->__data.__wakeup_seq;
       ++cond->__data.__futex;
@@ -51,24 +53,29 @@ __pthread_cond_signal (pthread_cond_t *cond)
      && defined __ASSUME_REQUEUE_PI)
       pthread_mutex_t *mut = cond->__data.__mutex;
 
-      if (USE_REQUEUE_PI (mut)
-	/* This can only really fail with a ENOSYS, since nobody can modify
-	   futex while we have the cond_lock.  */
-	  && lll_futex_cmp_requeue_pi (&cond->__data.__futex, 1, 0,
-				       &mut->__data.__lock,
-				       cond->__data.__futex, pshared) == 0)
-	{
+      if (USE_REQUEUE_PI (mut))
+      {
+	do {
+	  futex_err = lll_futex_cmp_requeue_pi (&cond->__data.__futex, 1, 0,
+						&mut->__data.__lock,
+						cond->__data.__futex, pshared);
+	} while (__glibc_unlikely (futex_err == -EAGAIN));
+
+	if (__glibc_likely (futex_err == 0)) {
 	  cond_unlock (cond, pshared);
 	  return 0;
 	}
-      else
+      }
 #endif
-	/* Wake one.  */
-	if (! __builtin_expect (lll_futex_wake_unlock (&cond->__data.__futex,
-						       1, 1,
-						       &cond->__data.__lock,
-						       pshared), 0))
-	  return 0;
+
+      /* Wake one.  */
+      if (__glibc_likely (futex_err != 0)
+	  && ! __builtin_expect (lll_futex_wake_unlock (&cond->__data.__futex,
+							1, 1,
+							&cond->__data.__lock,
+							pshared), 0)) {
+	return 0;
+      }
 
       /* Fallback if neither of them work.  */
       lll_futex_wake (&cond->__data.__futex, 1, pshared);
-- 
2.17.1

